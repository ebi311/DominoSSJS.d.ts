declare namespace java.util{
  export class Vector{
		clone():any;
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		add(arg0:any):boolean;
		addAll(arg0:Array<any>):boolean;
		clear():void;
		contains(arg0:any):boolean;
		containsAll(arg0:Array<any>):boolean;
		isEmpty():boolean;
		iterator():any;
		remove(arg0:any):boolean;
		removeAll(arg0:Array<any>):boolean;
		retainAll(arg0:Array<any>):boolean;
		size():number;
		toArray():any;
		toArray(arg0:any):any;
		add(arg0:number,arg1:any):void;
		addAll(arg0:number,arg1:Array<any>):boolean;
		get(arg0:number):any;
		indexOf(arg0:any):number;
		lastIndexOf(arg0:any):number;
		listIterator():any;
		listIterator(arg0:number):any;
		remove(arg0:number):any;
		set(arg0:number,arg1:any):any;
		subList(arg0:number,arg1:number):java.util.List;
		addElement(arg0:any):void;
		capacity():number;
		copyInto(arg0:any):void;
		elementAt(arg0:number):any;
		elements():any;
		ensureCapacity(arg0:number):void;
		firstElement():any;
		indexOf(arg0:any,arg1:number):number;
		insertElementAt(arg0:any,arg1:number):void;
		lastElement():any;
		lastIndexOf(arg0:any,arg1:number):number;
		removeAllElements():void;
		removeElement(arg0:any):boolean;
		removeElementAt(arg0:number):void;
		setElementAt(arg0:any,arg1:number):void;
		setSize(arg0:number):void;
		trimToSize():void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
}
  export class Date{
    clone():any;
    equals(arg0:any):boolean;
    hashCode():number;
    toString():string;
    getYear():number;
    setYear(arg0:number):void;
    getMonth():number;
    setMonth(arg0:number):void;
    getDate():number;
    setDate(arg0:number):void;
    getDay():number;
    getHours():number;
    setHours(arg0:number):void;
    getMinutes():number;
    setMinutes(arg0:number):void;
    getSeconds():number;
    setSeconds(arg0:number):void;
    getTime():number;
    setTime(arg0:number):void;
    before(arg0:java.util.Date):boolean;
    after(arg0:java.util.Date):boolean;
    compareTo(arg0:java.util.Date):number;
    toLocaleString():string;
    toGMTString():string;
    getTimezoneOffset():number;
    compareTo(arg0:any):number;
    getClass():any;
    notify():void;
    notifyAll():void;
    wait():void;
    wait(arg0:number):void;
    wait(arg0:number,arg1:number):void;
    UTC(arg0:number,arg1:number,arg2:number,arg3:number,arg4:number,arg5:number):number;
    parse(arg0:string):number;
  }
  export class List{
		add(arg0:number,arg1:any):void;
		add(arg0:any):boolean;
		addAll(arg0:number,arg1:Array<any>):boolean;
		addAll(arg0:Array<any>):boolean;
		clear():void;
		contains(arg0:any):boolean;
		containsAll(arg0:Array<any>):boolean;
		equals(arg0:any):boolean;
		get(arg0:number):any;
		hashCode():number;
		indexOf(arg0:any):number;
		isEmpty():boolean;
		iterator():any;
		lastIndexOf(arg0:any):number;
		listIterator():any;
		listIterator(arg0:number):any;
		remove(arg0:number):any;
		remove(arg0:any):boolean;
		removeAll(arg0:Array<any>):boolean;
		retainAll(arg0:Array<any>):boolean;
		set(arg0:number,arg1:any):any;
		size():number;
		subList(arg0:number,arg1:number):java.util.List;
		toArray():any;
		toArray(arg0:any):any;
	}
  export class Calendar{
		clone():any;
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		getTime():java.util.Date;
		setTime(arg0:java.util.Date):void;
		getTimeInMillis():number;
		setTimeInMillis(arg0:number):void;
		get(arg0:number):number;
		set(arg0:number,arg1:number):void;
		set(arg0:number,arg1:number,arg2:number):void;
		set(arg0:number,arg1:number,arg2:number,arg3:number,arg4:number):void;
		set(arg0:number,arg1:number,arg2:number,arg3:number,arg4:number,arg5:number):void;
		clear():void;
		clear(arg0:number):void;
		isSet(arg0:number):boolean;
		getDisplayName(arg0:number,arg1:number,arg2:java.util.Locale):string;
		getDisplayNames(arg0:number,arg1:number,arg2:java.util.Locale):any;
		before(arg0:any):boolean;
		after(arg0:any):boolean;
		compareTo(arg0:java.util.Calendar):number;
		add(arg0:number,arg1:number):void;
		roll(arg0:number,arg1:boolean):void;
		roll(arg0:number,arg1:number):void;
		setTimeZone(arg0:java.util.TimeZone):void;
		getTimeZone():java.util.TimeZone;
		setLenient(arg0:boolean):void;
		isLenient():boolean;
		setFirstDayOfWeek(arg0:number):void;
		getFirstDayOfWeek():number;
		setMinimalDaysInFirstWeek(arg0:number):void;
		getMinimalDaysInFirstWeek():number;
		getMinimum(arg0:number):number;
		getMaximum(arg0:number):number;
		getGreatestMinimum(arg0:number):number;
		getLeastMaximum(arg0:number):number;
		getActualMinimum(arg0:number):number;
		getActualMaximum(arg0:number):number;
		compareTo(arg0:any):number;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
		getInstance():java.util.Calendar;
		getInstance(arg0:java.util.TimeZone):java.util.Calendar;
		getInstance(arg0:java.util.Locale):java.util.Calendar;
		getInstance(arg0:java.util.TimeZone,arg1:java.util.Locale):java.util.Calendar;
		getAvailableLocales():any;
	}
  export class TimeZone{
		clone():any;
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		getOffset(arg0:number,arg1:number,arg2:number,arg3:number,arg4:number,arg5:number):number;
		getOffset(arg0:number):number;
		setRawOffset(arg0:number):void;
		getRawOffset():number;
		getID():string;
		setID(arg0:string):void;
		getDisplayName():string;
		getDisplayName(arg0:java.util.Locale):string;
		getDisplayName(arg0:boolean,arg1:number):string;
		getDisplayName(arg0:boolean,arg1:number,arg2:java.util.Locale):string;
		getDSTSavings():number;
		useDaylightTime():boolean;
		inDaylightTime(arg0:java.util.Date):boolean;
		hasSameRules(arg0:java.util.TimeZone):boolean;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
		getTimeZone(arg0:string):java.util.TimeZone;
		getAvailableIDs(arg0:number):String[];
		getAvailableIDs():String[];
		getDefault():java.util.TimeZone;
		setDefault(arg0:java.util.TimeZone):void;
	}
  export class Locale{
		clone():any;
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		getLanguage():string;
		getCountry():string;
		getVariant():string;
		getISO3Language():string;
		getISO3Country():string;
		getDisplayLanguage():string;
		getDisplayLanguage(arg0:java.util.Locale):string;
		getDisplayCountry():string;
		getDisplayCountry(arg0:java.util.Locale):string;
		getDisplayVariant():string;
		getDisplayVariant(arg0:java.util.Locale):string;
		getDisplayName():string;
		getDisplayName(arg0:java.util.Locale):string;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
		getDefault():java.util.Locale;
		setDefault(arg0:java.util.Locale):void;
		getAvailableLocales():java.util.Locale[];
		getISOCountries():string[];
		getISOLanguages():string[];
	}
}
