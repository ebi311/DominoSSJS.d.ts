declare namespace lotus.domino{
  export class ACL{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getFirstEntry():lotus.domino.ACLEntry;
		getNextEntry(arg0:lotus.domino.ACLEntry):lotus.domino.ACLEntry;
		getNextEntry():lotus.domino.ACLEntry;
		getEntry(arg0:string):lotus.domino.ACLEntry;
		save():void;
		renameRole(arg0:string,arg1:string):void;
		addRole(arg0:string):void;
		deleteRole(arg0:string):void;
		createACLEntry(arg0:string,arg1:number):lotus.domino.ACLEntry;
		removeACLEntry(arg0:string):void;
		getRoles():java.util.Vector;
		getParent():lotus.domino.Database;
		isUniformAccess():boolean;
		setUniformAccess(arg0:boolean):void;
		isExtendedAccess():boolean;
		setExtendedAccess(arg0:boolean):void;
		isAdminReaderAuthor():boolean;
		setAdminReaderAuthor(arg0:boolean):void;
		isAdminNames():boolean;
		setAdminNames(arg0:boolean):void;
		getAdministrationServer():string;
		setAdministrationServer(arg0:string):void;
		getInternetLevel():number;
		setInternetLevel(arg0:number):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class ACLEntry{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		enableRole(arg0:string):void;
		disableRole(arg0:string):void;
		isRoleEnabled(arg0:string):boolean;
		remove():void;
		getRoles():java.util.Vector;
		getName():string;
		setName(arg0:string):void;
		getNameObject():lotus.domino.Name;
		setName(arg0:lotus.domino.Name):void;
		getLevel():number;
		setLevel(arg0:number):void;
		isCanCreatePersonalAgent():boolean;
		setCanCreatePersonalAgent(arg0:boolean):void;
		isCanCreatePersonalFolder():boolean;
		setCanCreatePersonalFolder(arg0:boolean):void;
		isCanCreateDocuments():boolean;
		setCanCreateDocuments(arg0:boolean):void;
		isCanDeleteDocuments():boolean;
		setCanDeleteDocuments(arg0:boolean):void;
		getParent():lotus.domino.ACL;
		isPublicReader():boolean;
		setPublicReader(arg0:boolean):void;
		isPublicWriter():boolean;
		setPublicWriter(arg0:boolean):void;
		isCanCreateLSOrJavaAgent():boolean;
		setCanCreateLSOrJavaAgent(arg0:boolean):void;
		isServer():boolean;
		setServer(arg0:boolean):void;
		isPerson():boolean;
		setPerson(arg0:boolean):void;
		isGroup():boolean;
		setGroup(arg0:boolean):void;
		getUserType():number;
		setUserType(arg0:number):void;
		isCanCreateSharedFolder():boolean;
		setCanCreateSharedFolder(arg0:boolean):void;
		isAdminReaderAuthor():boolean;
		setAdminReaderAuthor(arg0:boolean):void;
		isAdminServer():boolean;
		setAdminServer(arg0:boolean):void;
		isCanReplicateOrCopyDocuments():boolean;
		setCanReplicateOrCopyDocuments(arg0:boolean):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Base{
		recycle():void;
		recycle(arg0:java.util.Vector):void;
	}
	export class Agent{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		run():void;
		run(arg0:string):void;
		runWithDocumentContext(arg0:lotus.domino.Document):void;
		runWithDocumentContext(arg0:lotus.domino.Document,arg1:string):void;
		runOnServer():number;
		runOnServer(arg0:string):number;
		remove():void;
		save():void;
		getName():string;
		getOwner():string;
		getLastRun():lotus.domino.DateTime;
		isEnabled():boolean;
		setEnabled(arg0:boolean):void;
		getServerName():string;
		setServerName(arg0:string):void;
		getQuery():string;
		getComment():string;
		getParent():lotus.domino.Database;
		isPublic():boolean;
		getCommonOwner():string;
		getTrigger():number;
		getTarget():number;
		isNotesAgent():boolean;
		isWebAgent():boolean;
		getURL():string;
		getNotesURL():string;
		getHttpURL():string;
		getParameterDocID():string;
		getOnBehalfOf():string;
		isActivatable():boolean;
		getLockHolders():java.util.Vector;
		lock():boolean;
		lock(arg0:boolean):boolean;
		lock(arg0:string):boolean;
		lock(arg0:string,arg1:boolean):boolean;
		lock(arg0:java.util.Vector):boolean;
		lock(arg0:java.util.Vector,arg1:boolean):boolean;
		lockProvisional():boolean;
		lockProvisional(arg0:string):boolean;
		lockProvisional(arg0:java.util.Vector):boolean;
		unlock():void;
		isProhibitDesignUpdate():boolean;
		setProhibitDesignUpdate(arg0:boolean):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class AgentContext{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		updateProcessedDoc(arg0:lotus.domino.Document):void;
		unprocessedFTSearch(arg0:string,arg1:number):lotus.domino.DocumentCollection;
		unprocessedFTSearch(arg0:string,arg1:number,arg2:number,arg3:number):lotus.domino.DocumentCollection;
		unprocessedFTSearchRange(arg0:string,arg1:number,arg2:number):lotus.domino.DocumentCollection;
		unprocessedFTSearchRange(arg0:string,arg1:number,arg2:number,arg3:number,arg4:number):lotus.domino.DocumentCollection;
		unprocessedSearch(arg0:string,arg1:lotus.domino.DateTime,arg2:number):lotus.domino.DocumentCollection;
		getEffectiveUserName():string;
		getCurrentAgent():lotus.domino.Agent;
		getCurrentDatabase():lotus.domino.Database;
		getDocumentContext():lotus.domino.Document;
		getLastExitStatus():number;
		getLastRun():lotus.domino.DateTime;
		getSavedData():lotus.domino.Document;
		getUnprocessedDocuments():lotus.domino.DocumentCollection;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class AdministrationProcess{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getCertificateAuthorityOrg():string;
		setCertificateAuthorityOrg(arg0:string):void;
		getCertificateExpiration():lotus.domino.DateTime;
		setCertificateExpiration(arg0:lotus.domino.DateTime):void;
		getCertifierFile():string;
		setCertifierFile(arg0:string):void;
		getCertifierPassword():string;
		setCertifierPassword(arg0:string):void;
		isCertificateAuthorityAvailable():boolean;
		isUseCertificateAuthority():boolean;
		setUseCertificateAuthority(arg0:boolean):void;
		getParent():lotus.domino.Session;
		addServerToCluster(arg0:string,arg1:string):string;
		approveDeletePersonInDirectory(arg0:string):string;
		approveDeleteServerInDirectory(arg0:string):string;
		approveDesignElementDeletion(arg0:string):string;
		approveMailFileDeletion(arg0:string):string;
		approveMovedReplicaDeletion(arg0:string):string;
		approveNameChangeRetraction(arg0:string):string;
		approveRenamePersonInDirectory(arg0:string):string;
		approveRenameServerInDirectory(arg0:string):string;
		approveReplicaDeletion(arg0:string):string;
		approveResourceDeletion(arg0:string):string;
		approveHostedOrgStorageDeletion(arg0:string):string;
		configureMailAgent(arg0:string,arg1:string):string;
		configureMailAgent(arg0:string,arg1:string,arg2:boolean,arg3:boolean):string;
		findGroupInDomain(arg0:string):string;
		findUserInDomain(arg0:string):string;
		findServerInDomain(arg0:string):string;
		signDatabaseWithServerID(arg0:string,arg1:string):string;
		signDatabaseWithServerID(arg0:string,arg1:string,arg2:boolean):string;
		createReplica(arg0:string,arg1:string,arg2:string):string;
		createReplica(arg0:string,arg1:string,arg2:string,arg3:string,arg4:boolean,arg5:boolean):string;
		moveReplica(arg0:string,arg1:string,arg2:string):string;
		moveReplica(arg0:string,arg1:string,arg2:string,arg3:string,arg4:boolean,arg5:boolean):string;
		deleteGroup(arg0:string,arg1:boolean):string;
		deleteGroup(arg0:string,arg1:boolean,arg2:boolean):string;
		deleteReplicas(arg0:string,arg1:string):string;
		deleteServer(arg0:string,arg1:boolean):string;
		moveRoamingUser(arg0:string,arg1:string,arg2:string):string;
		removeServerFromCluster(arg0:string):string;
		renameGroup(arg0:string,arg1:string):string;
		renameWebUser(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string,arg6:string):string;
		setServerDirectoryAssistanceSettings(arg0:string,arg1:string):string;
		addGroupMembers(arg0:string,arg1:java.util.Vector):string;
		deleteUser(arg0:string,arg1:boolean,arg2:number,arg3:string):string;
		deleteUser(arg0:string,arg1:boolean,arg2:number,arg3:string,arg4:boolean):string;
		moveMailUser(arg0:string,arg1:string,arg2:string):string;
		moveMailUser(arg0:string,arg1:string,arg2:string,arg3:boolean,arg4:java.util.Vector,arg5:boolean):string;
		changeHTTPPassword(arg0:string,arg1:string,arg2:string):string;
		setUserPasswordSettings(arg0:string,arg1:number,arg2:number,arg3:number,arg4:boolean):string;
		addInternetCertificateToUser(arg0:string,arg1:string,arg2:string):string;
		addInternetCertificateToUser(arg0:string,arg1:string,arg2:string,arg3:lotus.domino.DateTime):string;
		moveUserInHierarchyRequest(arg0:string,arg1:string):string;
		moveUserInHierarchyRequest(arg0:string,arg1:string,arg2:boolean):string;
		moveUserInHierarchyComplete(arg0:string):string;
		moveUserInHierarchyComplete(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string,arg6:string,arg7:string,arg8:boolean):string;
		recertifyServer(arg0:string):string;
		recertifyUser(arg0:string):string;
		renameNotesUser(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string):string;
		renameNotesUser(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string,arg6:string,arg7:string,arg8:boolean):string;
		upgradeUserToHierarchical(arg0:string):string;
		upgradeUserToHierarchical(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string):string;
		setEnableOutlookSupport(arg0:string,arg1:boolean):string;
		delegateMailFile(arg0:string,arg1:java.util.Vector,arg2:java.util.Vector,arg3:java.util.Vector,arg4:java.util.Vector,arg5:java.util.Vector,arg6:java.util.Vector,arg7:java.util.Vector,arg8:string,arg9:string):string;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class ColorObject{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		setRGB(arg0:number,arg1:number,arg2:number):number;
		setHSL(arg0:number,arg1:number,arg2:number):number;
		getRed():number;
		getGreen():number;
		getBlue():number;
		getHue():number;
		getSaturation():number;
		getLuminance():number;
		getNotesColor():number;
		setNotesColor(arg0:number):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Database{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		open():boolean;
		openByReplicaID(arg0:string,arg1:string):boolean;
		openIfModified(arg0:string,arg1:string,arg2:lotus.domino.DateTime):boolean;
		openWithFailover(arg0:string,arg1:string):boolean;
		compact():number;
		compactWithOptions(arg0:string):number;
		compactWithOptions(arg0:number):number;
		compactWithOptions(arg0:number,arg1:string):number;
		createCopy(arg0:string,arg1:string):lotus.domino.Database;
		createCopy(arg0:string,arg1:string,arg2:number):lotus.domino.Database;
		createDocument():lotus.domino.Document;
		createFromTemplate(arg0:string,arg1:string,arg2:boolean):lotus.domino.Database;
		createFromTemplate(arg0:string,arg1:string,arg2:boolean,arg3:number):lotus.domino.Database;
		createFTIndex(arg0:number,arg1:boolean):void;
		createReplica(arg0:string,arg1:string):lotus.domino.Database;
		getDocumentByID(arg0:string):lotus.domino.Document;
		getDocumentByUNID(arg0:string):lotus.domino.Document;
		getDocumentByURL(arg0:string,arg1:boolean):lotus.domino.Document;
		getDocumentByURL(arg0:string,arg1:boolean,arg2:boolean,arg3:boolean,arg4:string,arg5:string,arg6:string,arg7:string,arg8:string,arg9:boolean):lotus.domino.Document;
		getURLHeaderInfo(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string):string;
		getView(arg0:string):lotus.domino.View;
		grantAccess(arg0:string,arg1:number):void;
		queryAccess(arg0:string):number;
		queryAccessPrivileges(arg0:string):number;
		queryAccessRoles(arg0:string):java.util.Vector;
		remove():void;
		removeFTIndex():void;
		replicate(arg0:string):boolean;
		revokeAccess(arg0:string):void;
		updateFTIndex(arg0:boolean):void;
		FTSearch(arg0:string,arg1:number):lotus.domino.DocumentCollection;
		FTSearch(arg0:string):lotus.domino.DocumentCollection;
		FTSearch(arg0:string,arg1:number,arg2:number,arg3:number):lotus.domino.DocumentCollection;
		FTSearchRange(arg0:string,arg1:number,arg2:number,arg3:number,arg4:number):lotus.domino.DocumentCollection;
		search(arg0:string):lotus.domino.DocumentCollection;
		search(arg0:string,arg1:lotus.domino.DateTime):lotus.domino.DocumentCollection;
		search(arg0:string,arg1:lotus.domino.DateTime,arg2:number):lotus.domino.DocumentCollection;
		getProfileDocument(arg0:string,arg1:string):lotus.domino.Document;
		getProfileDocCollection(arg0:string):lotus.domino.DocumentCollection;
		FTDomainSearch(arg0:string,arg1:number,arg2:number,arg3:number,arg4:number,arg5:number,arg6:string):lotus.domino.Document;
		getOutline(arg0:string):lotus.domino.Outline;
		createOutline(arg0:string):lotus.domino.Outline;
		createOutline(arg0:string,arg1:boolean):lotus.domino.Outline;
		createNoteCollection(arg0:boolean):lotus.domino.NoteCollection;
		enableFolder(arg0:string):void;
		getAgent(arg0:string):lotus.domino.Agent;
		getForm(arg0:string):lotus.domino.Form;
		getTitle():string;
		setTitle(arg0:string):void;
		getType():number;
		getTemplateName():string;
		getDesignTemplateName():string;
		getFileName():string;
		getFilePath():string;
		getReplicaID():string;
		getServer():string;
		getCategories():string;
		setCategories(arg0:string):void;
		isFTIndexed():boolean;
		isInMultiDbIndexing():boolean;
		setInMultiDbIndexing(arg0:boolean):void;
		isLink():boolean;
		isOpen():boolean;
		isPublicAddressBook():boolean;
		isPrivateAddressBook():boolean;
		isDelayUpdates():boolean;
		setDelayUpdates(arg0:boolean):void;
		isMultiDbSearch():boolean;
		getManagers():java.util.Vector;
		getViews():java.util.Vector;
		getAgents():java.util.Vector;
		getAllDocuments():lotus.domino.DocumentCollection;
		getForms():java.util.Vector;
		getFTIndexFrequency():number;
		setFTIndexFrequency(arg0:number):void;
		getParent():lotus.domino.Session;
		getCurrentAccessLevel():number;
		getSizeQuota():number;
		setSizeQuota(arg0:number):void;
		getSize():number;
		getMaxSize():number;
		getPercentUsed():number;
		getLastModified():lotus.domino.DateTime;
		getLastFTIndexed():lotus.domino.DateTime;
		getCreated():lotus.domino.DateTime;
		getACL():lotus.domino.ACL;
		getACLActivityLog():java.util.Vector;
		getReplicationInfo():lotus.domino.Replication;
		getFolderReferencesEnabled():boolean;
		setFolderReferencesEnabled(arg0:boolean):void;
		getURL():string;
		getNotesURL():string;
		getHttpURL():string;
		createView():lotus.domino.View;
		createView(arg0:string):lotus.domino.View;
		createView(arg0:string,arg1:string):lotus.domino.View;
		createView(arg0:string,arg1:string,arg2:lotus.domino.View):lotus.domino.View;
		createView(arg0:string,arg1:string,arg2:lotus.domino.View,arg3:boolean):lotus.domino.View;
		fixup():void;
		fixup(arg0:number):void;
		markForDelete():void;
		setOption(arg0:number,arg1:boolean):void;
		getOption(arg0:number):boolean;
		isInService():boolean;
		setInService(arg0:boolean):void;
		isPendingDelete():boolean;
		isDocumentLockingEnabled():boolean;
		setDocumentLockingEnabled(arg0:boolean):void;
		isDesignLockingEnabled():boolean;
		setDesignLockingEnabled(arg0:boolean):void;
		sign():void;
		sign(arg0:number):void;
		sign(arg0:number,arg1:boolean):void;
		sign(arg0:number,arg1:boolean,arg2:string):void;
		sign(arg0:number,arg1:boolean,arg2:string,arg3:boolean):void;
		getFileFormat():number;
		getSizeWarning():number;
		setSizeWarning(arg0:number):void;
		getLastFixup():lotus.domino.DateTime;
		isDirectoryCatalog():boolean;
		isConfigurationDirectory():boolean;
		isClusterReplication():boolean;
		isCurrentAccessPublicReader():boolean;
		isCurrentAccessPublicWriter():boolean;
		getLimitRevisions():number;
		setLimitRevisions(arg0:number):void;
		getLimitUpdatedBy():number;
		setLimitUpdatedBy(arg0:number):void;
		getListInDbCatalog():boolean;
		setListInDbCatalog(arg0:boolean):void;
		getUndeleteExpireTime():number;
		setUndeleteExpireTime(arg0:number):void;
		getModifiedDocuments():lotus.domino.DocumentCollection;
		getModifiedDocuments(arg0:lotus.domino.DateTime):lotus.domino.DocumentCollection;
		getModifiedDocuments(arg0:lotus.domino.DateTime,arg1:number):lotus.domino.DocumentCollection;
		isDB2():boolean;
		getDB2Schema():string;
		getAllUnreadDocuments(arg0:string):lotus.domino.DocumentCollection;
		getAllReadDocuments(arg0:string):lotus.domino.DocumentCollection;
		getAllUnreadDocuments():lotus.domino.DocumentCollection;
		getAllReadDocuments():lotus.domino.DocumentCollection;
		createDocumentCollection():lotus.domino.DocumentCollection;
		createQueryView(arg0:string,arg1:string):lotus.domino.View;
		createQueryView(arg0:string,arg1:string,arg2:lotus.domino.View):lotus.domino.View;
		createQueryView(arg0:string,arg1:string,arg2:lotus.domino.View,arg3:boolean):lotus.domino.View;
		isAllowOpenSoftDeleted():boolean;
		setAllowOpenSoftDeleted(arg0:boolean):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class DateRange{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getStartDateTime():lotus.domino.DateTime;
		setStartDateTime(arg0:lotus.domino.DateTime):void;
		getEndDateTime():lotus.domino.DateTime;
		setEndDateTime(arg0:lotus.domino.DateTime):void;
		getText():string;
		setText(arg0:string):void;
		getParent():lotus.domino.Session;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class DateTime{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		adjustHour(arg0:number):void;
		adjustHour(arg0:number,arg1:boolean):void;
		adjustMinute(arg0:number):void;
		adjustMinute(arg0:number,arg1:boolean):void;
		adjustSecond(arg0:number):void;
		adjustSecond(arg0:number,arg1:boolean):void;
		adjustDay(arg0:number):void;
		adjustDay(arg0:number,arg1:boolean):void;
		adjustMonth(arg0:number):void;
		adjustMonth(arg0:number,arg1:boolean):void;
		adjustYear(arg0:number):void;
		adjustYear(arg0:number,arg1:boolean):void;
		convertToZone(arg0:number,arg1:boolean):void;
		setAnyDate():void;
		setAnyTime():void;
		setNow():void;
		timeDifference(arg0:lotus.domino.DateTime):number;
		timeDifferenceDouble(arg0:lotus.domino.DateTime):number;
		setLocalDate(arg0:number,arg1:number,arg2:number):void;
		setLocalDate(arg0:number,arg1:number,arg2:number,arg3:boolean):void;
		setLocalTime(arg0:java.util.Date):void;
		setLocalTime(arg0:java.util.Calendar):void;
		setLocalTime(arg0:number,arg1:number,arg2:number,arg3:number):void;
		getGMTTime():string;
		isDST():boolean;
		getLocalTime():string;
		setLocalTime(arg0:string):void;
		getReplicaID():string;
		getTimeZone():number;
		getZoneTime():string;
		getDateOnly():string;
		getTimeOnly():string;
		getParent():lotus.domino.Session;
		toJavaDate():java.util.Date;
		fromJavaDate(arg0:number,arg1:boolean):java.util.Date;
		JavaDateOp(arg0:number,arg1:number,arg2:boolean):java.util.Date;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class DbDirectory{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getFirstDatabase(arg0:number):lotus.domino.Database;
		getNextDatabase():lotus.domino.Database;
		createDatabase(arg0:string):lotus.domino.Database;
		createDatabase(arg0:string,arg1:boolean):lotus.domino.Database;
		openDatabase(arg0:string):lotus.domino.Database;
		openDatabase(arg0:string,arg1:boolean):lotus.domino.Database;
		openDatabaseIfModified(arg0:string,arg1:lotus.domino.DateTime):lotus.domino.Database;
		openMailDatabase():lotus.domino.Database;
		openDatabaseByReplicaID(arg0:string):lotus.domino.Database;
		getClusterName():string;
		getClusterName(arg0:string):string;
		getName():string;
		getParent():lotus.domino.Session;
		isHonorShowInOpenDatabaseDialog():boolean;
		setHonorShowInOpenDatabaseDialog(arg0:boolean):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Directory{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getServer():string;
		getAvailableView():string;
		getAvailableNames():java.util.Vector;
		getAvailableItems():java.util.Vector;
		isSearchAllDirectories():boolean;
		setSearchAllDirectories(arg0:boolean):void;
		isTrustedOnly():boolean;
		setTrustedOnly(arg0:boolean):void;
		isGroupAuthorizationOnly():boolean;
		setGroupAuthorizationOnly(arg0:boolean):void;
		isUseContextServer():boolean;
		setUseContextServer(arg0:boolean):void;
		isPartialMatches():boolean;
		setPartialMatches(arg0:boolean):void;
		isLimitMatches():boolean;
		setLimitMatches(arg0:boolean):void;
		lookupNames(arg0:string,arg1:string,arg2:string):lotus.domino.DirectoryNavigator;
		lookupNames(arg0:string,arg1:java.util.Vector,arg2:java.util.Vector,arg3:boolean):lotus.domino.DirectoryNavigator;
		lookupAllNames(arg0:string,arg1:string):lotus.domino.DirectoryNavigator;
		lookupAllNames(arg0:string,arg1:java.util.Vector):lotus.domino.DirectoryNavigator;
		createNavigator():lotus.domino.DirectoryNavigator;
		freeLookupBuffer():void;
		getMailInfo(arg0:string):java.util.Vector;
		getMailInfo(arg0:string,arg1:boolean,arg2:boolean):java.util.Vector;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class DirectoryNavigator{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getCurrentView():string;
		getCurrentMatch():number;
		getCurrentMatches():number;
		getCurrentItem():string;
		isNameLocated():boolean;
		isMatchLocated():boolean;
		getCurrentName():string;
		findFirstName():number;
		findNextName():number;
		findNthName(arg0:number):number;
		findFirstMatch():boolean;
		findNextMatch():boolean;
		findNthMatch(arg0:number):boolean;
		getFirstItemValue():java.util.Vector;
		getNextItemValue():java.util.Vector;
		getNthItemValue(arg0:number):java.util.Vector;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Document{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		appendItemValue(arg0:string,arg1:any):lotus.domino.Item;
		appendItemValue(arg0:string):lotus.domino.Item;
		appendItemValue(arg0:string,arg1:number):lotus.domino.Item;
		appendItemValue(arg0:string,arg1:number):lotus.domino.Item;
		computeWithForm(arg0:boolean,arg1:boolean):boolean;
		copyAllItems(arg0:lotus.domino.Document,arg1:boolean):void;
		copyItem(arg0:lotus.domino.Item,arg1:string):lotus.domino.Item;
		copyItem(arg0:lotus.domino.Item):lotus.domino.Item;
		copyToDatabase(arg0:lotus.domino.Database):lotus.domino.Document;
		createRichTextItem(arg0:string):lotus.domino.RichTextItem;
		createMIMEEntity():lotus.domino.MIMEEntity;
		createMIMEEntity(arg0:string):lotus.domino.MIMEEntity;
		closeMIMEEntities():boolean;
		closeMIMEEntities(arg0:boolean):boolean;
		closeMIMEEntities(arg0:boolean,arg1:string):boolean;
		getMIMEEntity():lotus.domino.MIMEEntity;
		getMIMEEntity(arg0:string):lotus.domino.MIMEEntity;
		createReplyMessage(arg0:boolean):lotus.domino.Document;
		encrypt():void;
		getFirstItem(arg0:string):lotus.domino.Item;
		getItemValue(arg0:string):java.util.Vector;
		getItemValueString(arg0:string):string;
		getItemValueInteger(arg0:string):number;
		getItemValueDouble(arg0:string):number;
		getItemValueCustomData(arg0:string,arg1:string):any;
		getItemValueCustomData(arg0:string):any;
		getItemValueCustomDataBytes(arg0:string,arg1:string):any;
		getItemValueDateTimeArray(arg0:string):java.util.Vector;
		hasItem(arg0:string):boolean;
		makeResponse(arg0:lotus.domino.Document):void;
		putInFolder(arg0:string):void;
		putInFolder(arg0:string,arg1:boolean):void;
		remove(arg0:boolean):boolean;
		removePermanently(arg0:boolean):boolean;
		removeFromFolder(arg0:string):void;
		removeItem(arg0:string):void;
		renderToRTItem(arg0:lotus.domino.RichTextItem):boolean;
		replaceItemValue(arg0:string,arg1:any):lotus.domino.Item;
		replaceItemValueCustomData(arg0:string,arg1:string,arg2:any):lotus.domino.Item;
		replaceItemValueCustomData(arg0:string,arg1:any):lotus.domino.Item;
		replaceItemValueCustomDataBytes(arg0:string,arg1:string,arg2:any):lotus.domino.Item;
		save(arg0:boolean,arg1:boolean,arg2:boolean):boolean;
		save(arg0:boolean,arg1:boolean):boolean;
		save(arg0:boolean):boolean;
		save():boolean;
		send(arg0:boolean,arg1:java.util.Vector):void;
		send(arg0:java.util.Vector):void;
		send(arg0:boolean,arg1:string):void;
		send(arg0:string):void;
		send(arg0:boolean):void;
		send():void;
		sign():void;
		getAttachment(arg0:string):lotus.domino.EmbeddedObject;
		getNoteID():string;
		getLNoteID():number;
		getParentDocumentUNID():string;
		getSigner():string;
		getUniversalID():string;
		setUniversalID(arg0:string):void;
		getVerifier():string;
		isEncrypted():boolean;
		isEncryptOnSend():boolean;
		setEncryptOnSend(arg0:boolean):void;
		hasEmbedded():boolean;
		isNewNote():boolean;
		isResponse():boolean;
		isSigned():boolean;
		isSaveMessageOnSend():boolean;
		setSaveMessageOnSend(arg0:boolean):void;
		isSentByAgent():boolean;
		isSignOnSend():boolean;
		setSignOnSend(arg0:boolean):void;
		getAuthors():java.util.Vector;
		getColumnValues():java.util.Vector;
		getEmbeddedObjects():java.util.Vector;
		getEncryptionKeys():java.util.Vector;
		setEncryptionKeys(arg0:java.util.Vector):void;
		getItems():java.util.Vector;
		getCreated():lotus.domino.DateTime;
		getLastAccessed():lotus.domino.DateTime;
		getLastModified():lotus.domino.DateTime;
		getInitiallyModified():lotus.domino.DateTime;
		getParentDatabase():lotus.domino.Database;
		getFTSearchScore():number;
		getSize():number;
		getParentView():lotus.domino.View;
		getResponses():lotus.domino.DocumentCollection;
		isProfile():boolean;
		getNameOfProfile():string;
		getKey():string;
		getFolderReferences():java.util.Vector;
		isValid():boolean;
		isDeleted():boolean;
		getURL():string;
		getNotesURL():string;
		getHttpURL():string;
		generateXML(arg0:any):void;
		generateXML():string;
		generateXML(arg0:any,arg1:lotus.domino.XSLTResultTarget):void;
		getReceivedItemText():java.util.Vector;
		getLockHolders():java.util.Vector;
		lock():boolean;
		lock(arg0:boolean):boolean;
		lock(arg0:string):boolean;
		lock(arg0:string,arg1:boolean):boolean;
		lock(arg0:java.util.Vector):boolean;
		lock(arg0:java.util.Vector,arg1:boolean):boolean;
		lockProvisional():boolean;
		lockProvisional(arg0:string):boolean;
		lockProvisional(arg0:java.util.Vector):boolean;
		unlock():void;
		markRead(arg0:string):void;
		markUnread(arg0:string):void;
		markRead():void;
		markUnread():void;
		attachVCard(arg0:lotus.domino.Base):void;
		attachVCard(arg0:lotus.domino.Base,arg1:string):void;
		getRead():boolean;
		getRead(arg0:string):boolean;
		convertToMIME():void;
		convertToMIME(arg0:number):void;
		convertToMIME(arg0:number,arg1:number):void;
		isPreferJavaDates():boolean;
		setPreferJavaDates(arg0:boolean):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class DocumentCollection{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getFirstDocument():lotus.domino.Document;
		getLastDocument():lotus.domino.Document;
		getNextDocument(arg0:lotus.domino.Document):lotus.domino.Document;
		getPrevDocument(arg0:lotus.domino.Document):lotus.domino.Document;
		getNthDocument(arg0:number):lotus.domino.Document;
		getNextDocument():lotus.domino.Document;
		getPrevDocument():lotus.domino.Document;
		getDocument(arg0:lotus.domino.Document):lotus.domino.Document;
		addDocument(arg0:lotus.domino.Document):void;
		addDocument(arg0:lotus.domino.Document,arg1:boolean):void;
		deleteDocument(arg0:lotus.domino.Document):void;
		FTSearch(arg0:string):void;
		FTSearch(arg0:string,arg1:number):void;
		removeAll(arg0:boolean):void;
		updateAll():void;
		stampAll(arg0:string,arg1:any):void;
		putAllInFolder(arg0:string):void;
		putAllInFolder(arg0:string,arg1:boolean):void;
		removeAllFromFolder(arg0:string):void;
		intersect(arg0:number):void;
		intersect(arg0:string):void;
		intersect(arg0:lotus.domino.Base):void;
		merge(arg0:number):void;
		merge(arg0:string):void;
		merge(arg0:lotus.domino.Base):void;
		subtract(arg0:number):void;
		subtract(arg0:string):void;
		subtract(arg0:lotus.domino.Base):void;
		contains(arg0:number):boolean;
		contains(arg0:string):boolean;
		contains(arg0:lotus.domino.Base):boolean;
		cloneCollection():lotus.domino.DocumentCollection;
		getCount():number;
		isSorted():boolean;
		getQuery():string;
		getParent():lotus.domino.Database;
		getUntilTime():lotus.domino.DateTime;
		markAllRead(arg0:string):void;
		markAllUnread(arg0:string):void;
		markAllRead():void;
		markAllUnread():void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class DxlExporter{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		exportDxl(arg0:lotus.domino.Database):string;
		exportDxl(arg0:lotus.domino.NoteCollection):string;
		exportDxl(arg0:lotus.domino.Document):string;
		exportDxl(arg0:lotus.domino.DocumentCollection):string;
		getLog():string;
		setLogComment(arg0:string):void;
		getLogComment():string;
		setExitOnFirstFatalError(arg0:boolean):void;
		getExitOnFirstFatalError():boolean;
		setForceNoteFormat(arg0:boolean):void;
		getForceNoteFormat():boolean;
		setOutputDOCTYPE(arg0:boolean):void;
		getOutputDOCTYPE():boolean;
		setConvertNotesBitmapsToGIF(arg0:boolean):void;
		getConvertNotesBitmapsToGIF():boolean;
		setDoctypeSYSTEM(arg0:string):void;
		getDoctypeSYSTEM():string;
		setOmitRichtextAttachments(arg0:boolean):void;
		getOmitRichtextAttachments():boolean;
		setOmitOLEObjects(arg0:boolean):void;
		getOmitOLEObjects():boolean;
		setOmitMiscFileObjects(arg0:boolean):void;
		getOmitMiscFileObjects():boolean;
		setOmitRichtextPictures(arg0:boolean):void;
		getOmitRichtextPictures():boolean;
		setUncompressAttachments(arg0:boolean):void;
		getUncompressAttachments():boolean;
		setAttachmentOmittedText(arg0:string):void;
		getAttachmentOmittedText():string;
		setOLEObjectOmittedText(arg0:string):void;
		getOLEObjectOmittedText():string;
		setPictureOmittedText(arg0:string):void;
		getPictureOmittedText():string;
		setOmitItemNames(arg0:java.util.Vector):void;
		getOmitItemNames():java.util.Vector;
		setRestrictToItemNames(arg0:java.util.Vector):void;
		getRestrictToItemNames():java.util.Vector;
		setRichTextOption(arg0:number):void;
		getRichTextOption():number;
		setMIMEOption(arg0:number):void;
		getMIMEOption():number;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class DxlImporter{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		importDxl(arg0:lotus.domino.Stream,arg1:lotus.domino.Database):void;
		importDxl(arg0:lotus.domino.RichTextItem,arg1:lotus.domino.Database):void;
		importDxl(arg0:string,arg1:lotus.domino.Database):void;
		getFirstImportedNoteID():string;
		getNextImportedNoteID(arg0:string):string;
		getLog():string;
		setLogComment(arg0:string):void;
		getLogComment():string;
		setExitOnFirstFatalError(arg0:boolean):void;
		getExitOnFirstFatalError():boolean;
		getImportedNoteCount():number;
		setInputValidationOption(arg0:number):void;
		getInputValidationOption():number;
		setAclImportOption(arg0:number):void;
		getAclImportOption():number;
		setDesignImportOption(arg0:number):void;
		getDesignImportOption():number;
		setDocumentImportOption(arg0:number):void;
		getDocumentImportOption():number;
		setUnknownTokenLogOption(arg0:number):void;
		getUnknownTokenLogOption():number;
		setReplaceDbProperties(arg0:boolean):void;
		getReplaceDbProperties():boolean;
		setCreateFTIndex(arg0:boolean):void;
		getCreateFTIndex():boolean;
		setReplicaRequiredForReplaceOrUpdate(arg0:boolean):void;
		getReplicaRequiredForReplaceOrUpdate():boolean;
		setCompileLotusScript(arg0:boolean):void;
		getCompileLotusScript():boolean;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class EmbeddedObject{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		markInvalid():void;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		NextractFile(arg0:string):void;
		NdoVerb(arg0:string):void;
		Nremove():void;
		activate(arg0:boolean):number;
		extractFile(arg0:string):void;
		doVerb(arg0:string):void;
		remove():void;
		getName():string;
		getClassName():string;
		getSource():string;
		getType():number;
		getFileSize():number;
		getFileCreated():lotus.domino.DateTime;
		getFileModified():lotus.domino.DateTime;
		getParent():lotus.domino.RichTextItem;
		getVerbs():java.util.Vector;
		getObject():number;
		getReader():any;
		getInputSource():any;
		getInputStream():any;
		parseXML(arg0:boolean):any;
		transformXML(arg0:any,arg1:lotus.domino.XSLTResultTarget):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Form{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		remove():void;
		isSubForm():boolean;
		getName():string;
		getAliases():java.util.Vector;
		getReaders():java.util.Vector;
		setReaders(arg0:java.util.Vector):void;
		getFormUsers():java.util.Vector;
		setFormUsers(arg0:java.util.Vector):void;
		getFields():java.util.Vector;
		isProtectReaders():boolean;
		setProtectReaders(arg0:boolean):void;
		isProtectUsers():boolean;
		setProtectUsers(arg0:boolean):void;
		getParent():lotus.domino.Database;
		getURL():string;
		getNotesURL():string;
		getHttpURL():string;
		getFieldType(arg0:string):number;
		getLockHolders():java.util.Vector;
		lock():boolean;
		lock(arg0:boolean):boolean;
		lock(arg0:string):boolean;
		lock(arg0:string,arg1:boolean):boolean;
		lock(arg0:java.util.Vector):boolean;
		lock(arg0:java.util.Vector,arg1:boolean):boolean;
		lockProvisional():boolean;
		lockProvisional(arg0:string):boolean;
		lockProvisional(arg0:java.util.Vector):boolean;
		unlock():void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class International{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		isCurrencySuffix():boolean;
		isCurrencySpace():boolean;
		isCurrencyZero():boolean;
		isTime24Hour():boolean;
		isDST():boolean;
		isDateMDY():boolean;
		isDateDMY():boolean;
		isDateYMD():boolean;
		getCurrencyDigits():number;
		getTimeZone():number;
		getAMString():string;
		getPMString():string;
		getCurrencySymbol():string;
		getThousandsSep():string;
		getDecimalSep():string;
		getDateSep():string;
		getTimeSep():string;
		getYesterday():string;
		getToday():string;
		getTomorrow():string;
		getParent():lotus.domino.Session;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Item{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		abstractText(arg0:number,arg1:boolean,arg2:boolean):string;
		appendToTextList(arg0:java.util.Vector):void;
		appendToTextList(arg0:string):void;
		containsValue(arg0:any):boolean;
		copyItemToDocument(arg0:lotus.domino.Document,arg1:string):lotus.domino.Item;
		copyItemToDocument(arg0:lotus.domino.Document):lotus.domino.Item;
		remove():void;
		isAuthors():boolean;
		setAuthors(arg0:boolean):void;
		isEncrypted():boolean;
		setEncrypted(arg0:boolean):void;
		isNames():boolean;
		setNames(arg0:boolean):void;
		isProtected():boolean;
		setProtected(arg0:boolean):void;
		isReaders():boolean;
		setReaders(arg0:boolean):void;
		isSigned():boolean;
		setSigned(arg0:boolean):void;
		isSummary():boolean;
		setSummary(arg0:boolean):void;
		getDateTimeValue():lotus.domino.DateTime;
		setDateTimeValue(arg0:lotus.domino.DateTime):void;
		getParent():lotus.domino.Document;
		getValues():java.util.Vector;
		setValues(arg0:java.util.Vector):void;
		getValueString():string;
		setValueString(arg0:string):void;
		getValueDouble():number;
		setValueDouble(arg0:number):void;
		getValueInteger():number;
		setValueInteger(arg0:number):void;
		getValueCustomDataBytes(arg0:string):any;
		getValueCustomData(arg0:string):any;
		getValueCustomData():any;
		setValueCustomDataBytes(arg0:string,arg1:any):void;
		setValueCustomData(arg0:string,arg1:any):void;
		setValueCustomData(arg0:any):void;
		getValueDateTimeArray():java.util.Vector;
		getType():number;
		getValueLength():number;
		getName():string;
		getText():string;
		getText(arg0:number):string;
		isSaveToDisk():boolean;
		setSaveToDisk(arg0:boolean):void;
		getLastModified():lotus.domino.DateTime;
		getMIMEEntity():lotus.domino.MIMEEntity;
		getReader():any;
		getInputSource():any;
		getInputStream():any;
		parseXML(arg0:boolean):any;
		transformXML(arg0:any,arg1:lotus.domino.XSLTResultTarget):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Log{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		openNotesLog(arg0:string,arg1:string):void;
		openFileLog(arg0:string):void;
		openMailLog(arg0:java.util.Vector,arg1:string):void;
		openAgentLog():void;
		logAction(arg0:string):void;
		logError(arg0:number,arg1:string):void;
		logEvent(arg0:string,arg1:string,arg2:number,arg3:number):void;
		close():void;
		isLogErrors():boolean;
		setLogErrors(arg0:boolean):void;
		isLogActions():boolean;
		setLogActions(arg0:boolean):void;
		getNumActions():number;
		getNumErrors():number;
		isOverwriteFile():boolean;
		setOverwriteFile(arg0:boolean):void;
		getProgramName():string;
		setProgramName(arg0:string):void;
		getParent():lotus.domino.Session;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class MIMEEntity{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		decodeContent():void;
		encodeContent(arg0:number):void;
		getEntityAsText(arg0:lotus.domino.Stream):void;
		getEntityAsText(arg0:lotus.domino.Stream,arg1:java.util.Vector):void;
		getEntityAsText(arg0:lotus.domino.Stream,arg1:java.util.Vector,arg2:boolean):void;
		getBoundaryStart():string;
		getBoundaryEnd():string;
		getCharset():string;
		getContentAsBytes(arg0:lotus.domino.Stream):void;
		getContentAsBytes(arg0:lotus.domino.Stream,arg1:boolean):void;
		getContentAsText(arg0:lotus.domino.Stream):void;
		getContentAsText(arg0:lotus.domino.Stream,arg1:boolean):void;
		getEncoding():number;
		getNthHeader(arg0:string):lotus.domino.MIMEHeader;
		getNthHeader(arg0:string,arg1:number):lotus.domino.MIMEHeader;
		getNextEntity():lotus.domino.MIMEEntity;
		getNextEntity(arg0:number):lotus.domino.MIMEEntity;
		getPrevEntity():lotus.domino.MIMEEntity;
		getPrevEntity(arg0:number):lotus.domino.MIMEEntity;
		getNextSibling():lotus.domino.MIMEEntity;
		getPrevSibling():lotus.domino.MIMEEntity;
		getFirstChildEntity():lotus.domino.MIMEEntity;
		getParentEntity():lotus.domino.MIMEEntity;
		getPreamble():string;
		getAttachName():string;
		getSomeHeaders():string;
		getSomeHeaders(arg0:java.util.Vector):string;
		getSomeHeaders(arg0:java.util.Vector,arg1:boolean):string;
		remove():void;
		setContentFromBytes(arg0:lotus.domino.Stream,arg1:string,arg2:number):void;
		setContentFromText(arg0:lotus.domino.Stream,arg1:string,arg2:number):void;
		createChildEntity():lotus.domino.MIMEEntity;
		createChildEntity(arg0:lotus.domino.MIMEEntity):lotus.domino.MIMEEntity;
		createHeader(arg0:string):lotus.domino.MIMEHeader;
		createParentEntity():lotus.domino.MIMEEntity;
		getContentType():string;
		getContentSubType():string;
		getContentAsText():string;
		getHeaderObjects():java.util.Vector;
		getHeaders():string;
		setPreamble(arg0:string):void;
		getReader():any;
		getInputSource():any;
		getInputStream():any;
		parseXML(arg0:boolean):any;
		transformXML(arg0:any,arg1:lotus.domino.XSLTResultTarget):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class MIMEHeader{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		addValText(arg0:string):boolean;
		addValText(arg0:string,arg1:string):boolean;
		getHeaderVal():string;
		getHeaderVal(arg0:boolean):string;
		getHeaderVal(arg0:boolean,arg1:boolean):string;
		getHeaderValAndParams():string;
		getHeaderValAndParams(arg0:boolean):string;
		getHeaderValAndParams(arg0:boolean,arg1:boolean):string;
		getParamVal(arg0:string):string;
		getParamVal(arg0:string,arg1:boolean):string;
		remove():void;
		setHeaderVal(arg0:string):boolean;
		setHeaderValAndParams(arg0:string):boolean;
		setParamVal(arg0:string,arg1:string):boolean;
		getHeaderName():string;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Name{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getADMD():string;
		getAbbreviated():string;
		getCountry():string;
		getCanonical():string;
		getCommon():string;
		getGiven():string;
		getInitials():string;
		getOrganization():string;
		getOrgUnit1():string;
		getOrgUnit2():string;
		getOrgUnit3():string;
		getOrgUnit4():string;
		getPRMD():string;
		getGeneration():string;
		getSurname():string;
		getKeyword():string;
		isHierarchical():boolean;
		getParent():lotus.domino.Session;
		getAddr821():string;
		getAddr822LocalPart():string;
		getAddr822Phrase():string;
		getAddr822Comment1():string;
		getAddr822Comment2():string;
		getAddr822Comment3():string;
		getLanguage():string;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Newsletter{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		formatMsgWithDoclinks(arg0:lotus.domino.Database):lotus.domino.Document;
		formatDocument(arg0:lotus.domino.Database,arg1:number):lotus.domino.Document;
		isDoSubject():boolean;
		setDoSubject(arg0:boolean):void;
		isDoScore():boolean;
		setDoScore(arg0:boolean):void;
		getSubjectItemName():string;
		setSubjectItemName(arg0:string):void;
		getParent():lotus.domino.Session;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class NoteCollection{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		selectAllNotes(arg0:boolean):void;
		selectAllDataNotes(arg0:boolean):void;
		selectAllAdminNotes(arg0:boolean):void;
		selectAllDesignElements(arg0:boolean):void;
		selectAllFormatElements(arg0:boolean):void;
		selectAllIndexElements(arg0:boolean):void;
		selectAllCodeElements(arg0:boolean):void;
		buildCollection():void;
		clearCollection():void;
		add(arg0:string):void;
		add(arg0:number):void;
		add(arg0:number[]):void;
		add(arg0:lotus.domino.Document):void;
		add(arg0:lotus.domino.DocumentCollection):void;
		add(arg0:lotus.domino.NoteCollection):void;
		add(arg0:lotus.domino.Form):void;
		add(arg0:lotus.domino.Agent):void;
		add(arg0:lotus.domino.View):void;
		remove(arg0:string):void;
		remove(arg0:number):void;
		remove(arg0:lotus.domino.Document):void;
		remove(arg0:lotus.domino.DocumentCollection):void;
		remove(arg0:lotus.domino.NoteCollection):void;
		remove(arg0:lotus.domino.Form):void;
		remove(arg0:lotus.domino.Agent):void;
		remove(arg0:lotus.domino.View):void;
		intersect(arg0:string):void;
		intersect(arg0:number):void;
		intersect(arg0:lotus.domino.Document):void;
		intersect(arg0:lotus.domino.DocumentCollection):void;
		intersect(arg0:lotus.domino.NoteCollection):void;
		intersect(arg0:lotus.domino.Form):void;
		intersect(arg0:lotus.domino.Agent):void;
		intersect(arg0:lotus.domino.View):void;
		getFirstNoteID():string;
		getNextNoteID(arg0:string):string;
		getLastNoteID():string;
		getPrevNoteID(arg0:string):string;
		getUNID(arg0:string):string;
		getNoteIDs():number[];
		setSelectDocuments(arg0:boolean):void;
		getSelectDocuments():boolean;
		setSelectProfiles(arg0:boolean):void;
		getSelectProfiles():boolean;
		setSelectForms(arg0:boolean):void;
		getSelectForms():boolean;
		setSelectSubforms(arg0:boolean):void;
		getSelectSubforms():boolean;
		setSelectActions(arg0:boolean):void;
		getSelectActions():boolean;
		setSelectFramesets(arg0:boolean):void;
		getSelectFramesets():boolean;
		setSelectPages(arg0:boolean):void;
		getSelectPages():boolean;
		setSelectImageResources(arg0:boolean):void;
		getSelectImageResources():boolean;
		setSelectStylesheetResources(arg0:boolean):void;
		getSelectStylesheetResources():boolean;
		setSelectJavaResources(arg0:boolean):void;
		getSelectJavaResources():boolean;
		setSelectMiscFormatElements(arg0:boolean):void;
		getSelectMiscFormatElements():boolean;
		setSelectViews(arg0:boolean):void;
		getSelectViews():boolean;
		setSelectFolders(arg0:boolean):void;
		getSelectFolders():boolean;
		setSelectNavigators(arg0:boolean):void;
		getSelectNavigators():boolean;
		setSelectMiscIndexElements(arg0:boolean):void;
		getSelectMiscIndexElements():boolean;
		setSelectIcon(arg0:boolean):void;
		getSelectIcon():boolean;
		setSelectAgents(arg0:boolean):void;
		getSelectAgents():boolean;
		setSelectOutlines(arg0:boolean):void;
		getSelectOutlines():boolean;
		setSelectDatabaseScript(arg0:boolean):void;
		getSelectDatabaseScript():boolean;
		setSelectScriptLibraries(arg0:boolean):void;
		getSelectScriptLibraries():boolean;
		setSelectDataConnections(arg0:boolean):void;
		getSelectDataConnections():boolean;
		setSelectMiscCodeElements(arg0:boolean):void;
		getSelectMiscCodeElements():boolean;
		setSelectSharedFields(arg0:boolean):void;
		getSelectSharedFields():boolean;
		setSelectHelpAbout(arg0:boolean):void;
		getSelectHelpAbout():boolean;
		setSelectHelpUsing(arg0:boolean):void;
		getSelectHelpUsing():boolean;
		setSelectHelpIndex(arg0:boolean):void;
		getSelectHelpIndex():boolean;
		setSelectReplicationFormulas(arg0:boolean):void;
		getSelectReplicationFormulas():boolean;
		setSelectAcl(arg0:boolean):void;
		getSelectAcl():boolean;
		setSelectionFormula(arg0:string):void;
		getSelectionFormula():string;
		getCount():number;
		setSinceTime(arg0:lotus.domino.DateTime):void;
		getSinceTime():lotus.domino.DateTime;
		setLastBuildTime(arg0:lotus.domino.DateTime):void;
		getLastBuildTime():lotus.domino.DateTime;
		getUntilTime():lotus.domino.DateTime;
		getParent():lotus.domino.Database;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class NotesProperty{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getName():string;
		getNamespace():string;
		getValues():java.util.Vector;
		getValueString():string;
		getTypeName():string;
		isInput():boolean;
		getTitle():string;
		getDescription():string;
		publish():void;
		clear():void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Outline{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		save():number;
		createEntry(arg0:string):lotus.domino.OutlineEntry;
		createEntry(arg0:string,arg1:lotus.domino.OutlineEntry):lotus.domino.OutlineEntry;
		createEntry(arg0:string,arg1:lotus.domino.OutlineEntry,arg2:boolean):lotus.domino.OutlineEntry;
		createEntry(arg0:string,arg1:lotus.domino.OutlineEntry,arg2:boolean,arg3:boolean):lotus.domino.OutlineEntry;
		createEntry(arg0:lotus.domino.OutlineEntry):lotus.domino.OutlineEntry;
		createEntry(arg0:lotus.domino.OutlineEntry,arg1:lotus.domino.OutlineEntry):lotus.domino.OutlineEntry;
		createEntry(arg0:lotus.domino.OutlineEntry,arg1:lotus.domino.OutlineEntry,arg2:boolean):lotus.domino.OutlineEntry;
		createEntry(arg0:lotus.domino.OutlineEntry,arg1:lotus.domino.OutlineEntry,arg2:boolean,arg3:boolean):lotus.domino.OutlineEntry;
		getParent(arg0:lotus.domino.OutlineEntry):lotus.domino.OutlineEntry;
		getNext(arg0:lotus.domino.OutlineEntry):lotus.domino.OutlineEntry;
		getPrev(arg0:lotus.domino.OutlineEntry):lotus.domino.OutlineEntry;
		getNextSibling(arg0:lotus.domino.OutlineEntry):lotus.domino.OutlineEntry;
		getPrevSibling(arg0:lotus.domino.OutlineEntry):lotus.domino.OutlineEntry;
		getChild(arg0:lotus.domino.OutlineEntry):lotus.domino.OutlineEntry;
		getFirst():lotus.domino.OutlineEntry;
		getLast():lotus.domino.OutlineEntry;
		addEntry(arg0:lotus.domino.OutlineEntry,arg1:lotus.domino.OutlineEntry):void;
		addEntry(arg0:lotus.domino.OutlineEntry,arg1:lotus.domino.OutlineEntry,arg2:boolean):void;
		addEntry(arg0:lotus.domino.OutlineEntry,arg1:lotus.domino.OutlineEntry,arg2:boolean,arg3:boolean):void;
		removeEntry(arg0:lotus.domino.OutlineEntry):void;
		moveEntry(arg0:lotus.domino.OutlineEntry,arg1:lotus.domino.OutlineEntry):void;
		moveEntry(arg0:lotus.domino.OutlineEntry,arg1:lotus.domino.OutlineEntry,arg2:boolean):void;
		moveEntry(arg0:lotus.domino.OutlineEntry,arg1:lotus.domino.OutlineEntry,arg2:boolean,arg3:boolean):void;
		getParentDatabase():lotus.domino.Database;
		getName():string;
		getAlias():string;
		getComment():string;
		setName(arg0:string):void;
		setAlias(arg0:string):void;
		setComment(arg0:string):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class OutlineEntry{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		setNoteLink(arg0:lotus.domino.Database):boolean;
		setNoteLink(arg0:lotus.domino.View):boolean;
		setNoteLink(arg0:lotus.domino.Document):boolean;
		setURL(arg0:string):boolean;
		setNamedElement(arg0:lotus.domino.Database,arg1:string,arg2:number):boolean;
		setAction(arg0:string):boolean;
		getDatabase():lotus.domino.Database;
		getView():lotus.domino.View;
		getDocument():lotus.domino.Document;
		getParent():lotus.domino.Outline;
		getNamedElement():string;
		getURL():string;
		getFormula():string;
		hasChildren():boolean;
		isInThisDB():boolean;
		isHidden():boolean;
		isHiddenFromNotes():boolean;
		isHiddenFromWeb():boolean;
		isPrivate():boolean;
		getType():number;
		getEntryClass():number;
		getLabel():string;
		getImagesText():string;
		getFrameText():string;
		getLevel():number;
		getAlias():string;
		getKeepSelectionFocus():boolean;
		getUseHideFormula():boolean;
		getHideFormula():string;
		setHidden(arg0:boolean):void;
		setHiddenFromNotes(arg0:boolean):void;
		setHiddenFromWeb(arg0:boolean):void;
		setLabel(arg0:string):void;
		setAlias(arg0:string):void;
		setImagesText(arg0:string):void;
		setFrameText(arg0:string):void;
		setKeepSelectionFocus(arg0:boolean):void;
		setUseHideFormula(arg0:boolean):void;
		setHideFormula(arg0:string):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class PropertyBroker{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getInputPropertyContext():java.util.Vector;
		getPropertyValue(arg0:string):java.util.Vector;
		getPropertyValueString(arg0:string):string;
		setPropertyValue(arg0:string,arg1:any):lotus.domino.NotesProperty;
		publish():void;
		clearProperty(arg0:string):void;
		hasProperty(arg0:string):boolean;
		getProperty(arg0:string):lotus.domino.NotesProperty;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Registration{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getParent():lotus.domino.Session;
		registerNewUser(arg0:string,arg1:string,arg2:string):boolean;
		registerNewUser(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string):boolean;
		registerNewUser(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string,arg6:string,arg7:string,arg8:string,arg9:string,arg10:string):boolean;
		registerNewUser(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string,arg6:string,arg7:string,arg8:string,arg9:string,arg10:string,arg11:string,arg12:string):boolean;
		registerNewServer(arg0:string,arg1:string,arg2:string,arg3:string):boolean;
		registerNewServer(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string):boolean;
		registerNewServer(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string,arg6:string,arg7:string,arg8:string,arg9:string):boolean;
		crossCertify(arg0:string):boolean;
		crossCertify(arg0:string,arg1:string):boolean;
		crossCertify(arg0:string,arg1:string,arg2:string):boolean;
		recertify(arg0:string):boolean;
		recertify(arg0:string,arg1:string):boolean;
		recertify(arg0:string,arg1:string,arg2:string):boolean;
		registerNewCertifier(arg0:string,arg1:string,arg2:string):boolean;
		registerNewCertifier(arg0:string,arg1:string,arg2:string,arg3:string):boolean;
		switchToID(arg0:string,arg1:string):string;
		addUserToAddressBook(arg0:string,arg1:string,arg2:string):boolean;
		addUserToAddressBook(arg0:string,arg1:string,arg2:string,arg3:string):boolean;
		addUserToAddressBook(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string,arg6:string,arg7:string,arg8:string,arg9:string,arg10:string):boolean;
		addServerToAddressBook(arg0:string,arg1:string,arg2:string):boolean;
		addServerToAddressBook(arg0:string,arg1:string,arg2:string,arg3:string):boolean;
		addServerToAddressBook(arg0:string,arg1:string,arg2:string,arg3:string,arg4:string,arg5:string,arg6:string,arg7:string,arg8:string):boolean;
		addCertifierToAddressBook(arg0:string):boolean;
		addCertifierToAddressBook(arg0:string,arg1:string):boolean;
		addCertifierToAddressBook(arg0:string,arg1:string,arg2:string,arg3:string):boolean;
		getIDFromServer(arg0:string,arg1:string,arg2:boolean):void;
		deleteIDOnServer(arg0:string,arg1:boolean):void;
		addUserProfile(arg0:string,arg1:string):void;
		getUserInfo(arg0:string,arg1:any,arg2:any,arg3:any,arg4:any,arg5:java.util.Vector):void;
		getRegistrationLog():string;
		setRegistrationLog(arg0:string):void;
		getExpiration():lotus.domino.DateTime;
		setExpiration(arg0:lotus.domino.DateTime):void;
		getMinPasswordLength():number;
		setMinPasswordLength(arg0:number):void;
		isNorthAmerican():boolean;
		setNorthAmerican(arg0:boolean):void;
		getCertifierIDFile():string;
		setCertifierIDFile(arg0:string):void;
		getRegistrationServer():string;
		setRegistrationServer(arg0:string):void;
		getOrgUnit():string;
		setOrgUnit(arg0:string):void;
		getIDType():number;
		setIDType(arg0:number):void;
		getCreateMailDb():boolean;
		setCreateMailDb(arg0:boolean):void;
		getUpdateAddressBook():boolean;
		setUpdateAddressBook(arg0:boolean):void;
		getStoreIDInAddressBook():boolean;
		setStoreIDInAddressBook(arg0:boolean):void;
		setAltOrgUnit(arg0:java.util.Vector):void;
		getAltOrgUnit():java.util.Vector;
		setAltOrgUnitLang(arg0:java.util.Vector):void;
		getAltOrgUnitLang():java.util.Vector;
		getCertifierName():string;
		setCertifierName(arg0:string):void;
		getMailACLManager():string;
		setMailACLManager(arg0:string):void;
		getMailInternetAddress():string;
		setMailInternetAddress(arg0:string):void;
		getMailTemplateName():string;
		setMailTemplateName(arg0:string):void;
		getPolicyName():string;
		setPolicyName(arg0:string):void;
		getRoamingServer():string;
		setRoamingServer(arg0:string):void;
		getRoamingSubdir():string;
		setRoamingSubdir(arg0:string):void;
		getShortName():string;
		setShortName(arg0:string):void;
		isEnforceUniqueShortName():boolean;
		setEnforceUniqueShortName(arg0:boolean):void;
		isRoamingUser():boolean;
		setRoamingUser(arg0:boolean):void;
		isMailCreateFTIndex():boolean;
		setMailCreateFTIndex(arg0:boolean):void;
		isNoIDFile():boolean;
		setNoIDFile(arg0:boolean):void;
		isStoreIDInMailfile():boolean;
		setStoreIDInMailfile(arg0:boolean):void;
		isSynchInternetPassword():boolean;
		setSynchInternetPassword(arg0:boolean):void;
		isUseCertificateAuthority():boolean;
		setUseCertificateAuthority(arg0:boolean):void;
		getMailQuotaSizeLimit():number;
		setMailQuotaSizeLimit(arg0:number):void;
		getMailQuotaWarningThreshold():number;
		setMailQuotaWarningThreshold(arg0:number):void;
		getMailOwnerAccess():number;
		setMailOwnerAccess(arg0:number):void;
		getMailSystem():number;
		setMailSystem(arg0:number):void;
		getRoamingCleanupPeriod():number;
		setRoamingCleanupPeriod(arg0:number):void;
		getRoamingCleanupSetting():number;
		setRoamingCleanupSetting(arg0:number):void;
		setGroupList(arg0:java.util.Vector):void;
		getGroupList():java.util.Vector;
		setMailReplicaServers(arg0:java.util.Vector):void;
		getMailReplicaServers():java.util.Vector;
		getPublicKeySize():number;
		setPublicKeySize(arg0:number):void;
		getForeignDN():string;
		setForeignDN(arg0:string):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Replication{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		reset():number;
		save():number;
		clearHistory():number;
		getEntry(arg0:string,arg1:string):lotus.domino.ReplicationEntry;
		getEntry(arg0:string,arg1:string,arg2:boolean):lotus.domino.ReplicationEntry;
		getCutoffInterval():number;
		getCutoffDate():lotus.domino.DateTime;
		isDisabled():boolean;
		isIgnoreDeletes():boolean;
		getDontSendLocalSecurityUpdates():boolean;
		isCutoffDelete():boolean;
		isAbstract():boolean;
		isIgnoreDestDeletes():boolean;
		getPriority():number;
		setCutoffInterval(arg0:number):void;
		setDisabled(arg0:boolean):void;
		setIgnoreDeletes(arg0:boolean):void;
		setDontSendLocalSecurityUpdates(arg0:boolean):void;
		setCutoffDelete(arg0:boolean):void;
		setAbstract(arg0:boolean):void;
		setIgnoreDestDeletes(arg0:boolean):void;
		setPriority(arg0:number):void;
		getEntries():java.util.Vector;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class ReplicationEntry{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		save():number;
		remove():number;
		getFormula():string;
		setFormula(arg0:string):void;
		getViews():string;
		setViews(arg0:string):void;
		getSource():string;
		getDestination():string;
		isIncludeACL():boolean;
		setIncludeACL(arg0:boolean):void;
		isIncludeAgents():boolean;
		setIncludeAgents(arg0:boolean):void;
		isIncludeDocuments():boolean;
		setIncludeDocuments(arg0:boolean):void;
		isIncludeForms():boolean;
		setIncludeForms(arg0:boolean):void;
		isIncludeFormulas():boolean;
		setIncludeFormulas(arg0:boolean):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class RichTextDoclink{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		remove():void;
		setHotSpotTextStyle(arg0:lotus.domino.RichTextStyle):void;
		getDBReplicaID():string;
		setDBReplicaID(arg0:string):void;
		getViewUnID():string;
		setViewUnID(arg0:string):void;
		getDocUnID():string;
		setDocUnID(arg0:string):void;
		getDisplayComment():string;
		setDisplayComment(arg0:string):void;
		getServerHint():string;
		setServerHint(arg0:string):void;
		getHotSpotText():string;
		setHotSpotText(arg0:string):void;
		getHotSpotTextStyle():lotus.domino.RichTextStyle;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class RichTextItem{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		abstractText(arg0:number,arg1:boolean,arg2:boolean):string;
		appendToTextList(arg0:java.util.Vector):void;
		appendToTextList(arg0:string):void;
		containsValue(arg0:any):boolean;
		copyItemToDocument(arg0:lotus.domino.Document,arg1:string):lotus.domino.Item;
		copyItemToDocument(arg0:lotus.domino.Document):lotus.domino.Item;
		remove():void;
		isAuthors():boolean;
		setAuthors(arg0:boolean):void;
		isEncrypted():boolean;
		setEncrypted(arg0:boolean):void;
		isNames():boolean;
		setNames(arg0:boolean):void;
		isProtected():boolean;
		setProtected(arg0:boolean):void;
		isReaders():boolean;
		setReaders(arg0:boolean):void;
		isSigned():boolean;
		setSigned(arg0:boolean):void;
		isSummary():boolean;
		setSummary(arg0:boolean):void;
		getDateTimeValue():lotus.domino.DateTime;
		setDateTimeValue(arg0:lotus.domino.DateTime):void;
		getParent():lotus.domino.Document;
		getValues():java.util.Vector;
		setValues(arg0:java.util.Vector):void;
		getValueString():string;
		setValueString(arg0:string):void;
		getValueDouble():number;
		setValueDouble(arg0:number):void;
		getValueInteger():number;
		setValueInteger(arg0:number):void;
		getValueCustomDataBytes(arg0:string):any;
		getValueCustomData(arg0:string):any;
		getValueCustomData():any;
		setValueCustomDataBytes(arg0:string,arg1:any):void;
		setValueCustomData(arg0:string,arg1:any):void;
		setValueCustomData(arg0:any):void;
		getValueDateTimeArray():java.util.Vector;
		getType():number;
		getValueLength():number;
		getName():string;
		getText():string;
		getText(arg0:number):string;
		isSaveToDisk():boolean;
		setSaveToDisk(arg0:boolean):void;
		getLastModified():lotus.domino.DateTime;
		getMIMEEntity():lotus.domino.MIMEEntity;
		getReader():any;
		getInputSource():any;
		getInputStream():any;
		parseXML(arg0:boolean):any;
		transformXML(arg0:any,arg1:lotus.domino.XSLTResultTarget):void;
		addNewLine(arg0:number,arg1:boolean):void;
		addNewLine(arg0:number):void;
		addNewLine():void;
		addTab(arg0:number):void;
		addTab():void;
		appendDocLink(arg0:lotus.domino.Document,arg1:string,arg2:string):void;
		appendDocLink(arg0:lotus.domino.Document,arg1:string):void;
		appendDocLink(arg0:lotus.domino.Document):void;
		appendDocLink(arg0:lotus.domino.Database,arg1:string,arg2:string):void;
		appendDocLink(arg0:lotus.domino.Database,arg1:string):void;
		appendDocLink(arg0:lotus.domino.Database):void;
		appendDocLink(arg0:lotus.domino.View,arg1:string,arg2:string):void;
		appendDocLink(arg0:lotus.domino.View,arg1:string):void;
		appendDocLink(arg0:lotus.domino.View):void;
		appendRTItem(arg0:lotus.domino.RichTextItem):void;
		appendStyle(arg0:lotus.domino.RichTextStyle):void;
		appendParagraphStyle(arg0:lotus.domino.RichTextParagraphStyle):void;
		addPageBreak(arg0:lotus.domino.RichTextParagraphStyle):void;
		addPageBreak():void;
		appendText(arg0:string):void;
		getFormattedText(arg0:boolean,arg1:number,arg2:number):string;
		appendTable(arg0:number,arg1:number):void;
		appendTable(arg0:number,arg1:number,arg2:java.util.Vector):void;
		appendTable(arg0:number,arg1:number,arg2:java.util.Vector,arg3:number,arg4:java.util.Vector):void;
		beginInsert(arg0:lotus.domino.Base):void;
		beginInsert(arg0:lotus.domino.Base,arg1:boolean):void;
		endInsert():void;
		createNavigator():lotus.domino.RichTextNavigator;
		createRange():lotus.domino.RichTextRange;
		getNotesFont(arg0:string,arg1:boolean):number;
		beginSection(arg0:string):void;
		beginSection(arg0:string,arg1:lotus.domino.RichTextStyle):void;
		beginSection(arg0:string,arg1:lotus.domino.RichTextStyle,arg2:lotus.domino.ColorObject,arg3:boolean):void;
		endSection():void;
		update():void;
		compact():void;
		getUnformattedText():string;
		getEmbeddedObject(arg0:string):lotus.domino.EmbeddedObject;
		embedObject(arg0:number,arg1:string,arg2:string,arg3:string):lotus.domino.EmbeddedObject;
		getEmbeddedObjects():java.util.Vector;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class RichTextNavigator{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		findNthElement(arg0:number,arg1:number):boolean;
		findFirstElement(arg0:number):boolean;
		findNextElement():boolean;
		findNextElement(arg0:number):boolean;
		findNextElement(arg0:number,arg1:number):boolean;
		findLastElement(arg0:number):boolean;
		getElement():lotus.domino.Base;
		getNthElement(arg0:number,arg1:number):lotus.domino.Base;
		getFirstElement(arg0:number):lotus.domino.Base;
		getNextElement():lotus.domino.Base;
		getNextElement(arg0:number):lotus.domino.Base;
		getNextElement(arg0:number,arg1:number):lotus.domino.Base;
		getLastElement(arg0:number):lotus.domino.Base;
		findFirstString(arg0:string):boolean;
		findFirstString(arg0:string,arg1:number):boolean;
		findNextString(arg0:string):boolean;
		findNextString(arg0:string,arg1:number):boolean;
		Clone():lotus.domino.RichTextNavigator;
		setPosition(arg0:lotus.domino.Base):void;
		setPositionAtEnd(arg0:lotus.domino.Base):void;
		setCharOffset(arg0:number):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class RichTextParagraphStyle{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getAlignment():number;
		setAlignment(arg0:number):void;
		getInterLineSpacing():number;
		setInterLineSpacing(arg0:number):void;
		getSpacingAbove():number;
		setSpacingAbove(arg0:number):void;
		getSpacingBelow():number;
		setSpacingBelow(arg0:number):void;
		getLeftMargin():number;
		setLeftMargin(arg0:number):void;
		getRightMargin():number;
		setRightMargin(arg0:number):void;
		getFirstLineLeftMargin():number;
		setFirstLineLeftMargin(arg0:number):void;
		getPagination():number;
		setPagination(arg0:number):void;
		getTabs():java.util.Vector;
		setTab(arg0:number,arg1:number):void;
		setTabs(arg0:number,arg1:number,arg2:number):void;
		setTabs(arg0:number,arg1:number,arg2:number,arg3:number):void;
		clearAllTabs():void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class RichTextRange{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		setStyle(arg0:lotus.domino.RichTextStyle):void;
		remove():void;
		setBegin(arg0:lotus.domino.Base):void;
		setEnd(arg0:lotus.domino.Base):void;
		reset(arg0:boolean,arg1:boolean):void;
		findandReplace(arg0:string,arg1:string):number;
		findandReplace(arg0:string,arg1:string,arg2:number):number;
		Clone():lotus.domino.RichTextRange;
		getType():number;
		getTextRun():string;
		getTextParagraph():string;
		getStyle():lotus.domino.RichTextStyle;
		getNavigator():lotus.domino.RichTextNavigator;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class RichTextSection{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		remove():void;
		setTitleStyle(arg0:lotus.domino.RichTextStyle):void;
		setBarColor(arg0:lotus.domino.ColorObject):void;
		getTitle():string;
		setTitle(arg0:string):void;
		getTitleStyle():lotus.domino.RichTextStyle;
		isExpanded():boolean;
		setExpanded(arg0:boolean):void;
		getBarColor():lotus.domino.ColorObject;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class RichTextStyle{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getBold():number;
		setBold(arg0:number):void;
		getItalic():number;
		setItalic(arg0:number):void;
		getUnderline():number;
		setUnderline(arg0:number):void;
		getStrikeThrough():number;
		setStrikeThrough(arg0:number):void;
		getEffects():number;
		setEffects(arg0:number):void;
		getFont():number;
		setFont(arg0:number):void;
		getFontSize():number;
		setFontSize(arg0:number):void;
		getColor():number;
		setColor(arg0:number):void;
		getPassThruHTML():number;
		setPassThruHTML(arg0:number):void;
		getParent():lotus.domino.Session;
		isDefault():boolean;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class RichTextTab{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		clear():void;
		getPosition():number;
		getType():number;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class RichTextTable{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		remove():void;
		addRow():void;
		addRow(arg0:number):void;
		addRow(arg0:number,arg1:number):void;
		removeRow():void;
		removeRow(arg0:number):void;
		removeRow(arg0:number,arg1:number):void;
		setColor(arg0:lotus.domino.ColorObject):void;
		setAlternateColor(arg0:lotus.domino.ColorObject):void;
		getStyle():number;
		setStyle(arg0:number):void;
		getRowCount():number;
		getColumnCount():number;
		getRowLabels():java.util.Vector;
		setRowLabels(arg0:java.util.Vector):void;
		getColor():lotus.domino.ColorObject;
		getAlternateColor():lotus.domino.ColorObject;
		isRightToLeft():boolean;
		setRightToLeft(arg0:boolean):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class Session{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		endAgentContext():void;
		resolve(arg0:string):lotus.domino.Base;
		evaluate(arg0:string):java.util.Vector;
		evaluate(arg0:string,arg1:lotus.domino.Document):java.util.Vector;
		getDatabase(arg0:string,arg1:string):lotus.domino.Database;
		getDatabase(arg0:string,arg1:string,arg2:boolean):lotus.domino.Database;
		createDateTime(arg0:string):lotus.domino.DateTime;
		createDateTime(arg0:java.util.Date):lotus.domino.DateTime;
		createDateTime(arg0:java.util.Calendar):lotus.domino.DateTime;
		createLog(arg0:string):lotus.domino.Log;
		createNewsletter(arg0:lotus.domino.DocumentCollection):lotus.domino.Newsletter;
		getDbDirectory(arg0:string):lotus.domino.DbDirectory;
		createDateRange():lotus.domino.DateRange;
		createDateRange(arg0:lotus.domino.DateTime,arg1:lotus.domino.DateTime):lotus.domino.DateRange;
		createDateRange(arg0:java.util.Date,arg1:java.util.Date):lotus.domino.DateRange;
		createName(arg0:string):lotus.domino.Name;
		createName(arg0:string,arg1:string):lotus.domino.Name;
		createRichTextStyle():lotus.domino.RichTextStyle;
		createRichTextParagraphStyle():lotus.domino.RichTextParagraphStyle;
		createStream():lotus.domino.Stream;
		createDxlExporter():lotus.domino.DxlExporter;
		createDxlImporter():lotus.domino.DxlImporter;
		createColorObject():lotus.domino.ColorObject;
		createAdministrationProcess(arg0:string):lotus.domino.AdministrationProcess;
		getPropertyBroker():lotus.domino.PropertyBroker;
		getDirectory():lotus.domino.Directory;
		getDirectory(arg0:string):lotus.domino.Directory;
		getEnvironmentString(arg0:string):string;
		getEnvironmentString(arg0:string,arg1:boolean):string;
		getEnvironmentValue(arg0:string):any;
		getEnvironmentValue(arg0:string,arg1:boolean):any;
		setEnvironmentVar(arg0:string,arg1:any):void;
		setEnvironmentVar(arg0:string,arg1:any,arg2:boolean):void;
		freeTimeSearch(arg0:lotus.domino.DateRange,arg1:number,arg2:any,arg3:boolean):java.util.Vector;
		getURLDatabase():lotus.domino.Database;
		createRegistration():lotus.domino.Registration;
		getAddressBooks():java.util.Vector;
		getUserNameList():java.util.Vector;
		getUserGroupNameList():java.util.Vector;
		getCommonUserName():string;
		getInternational():lotus.domino.International;
		isOnServer():boolean;
		isTrustedSession():boolean;
		isRestricted():boolean;
		getNotesVersion():string;
		getPlatform():string;
		getUserName():string;
		getEffectiveUserName():string;
		getOrgDirectoryPath():string;
		getCurrentDatabase():lotus.domino.Database;
		getUserNameObject():lotus.domino.Name;
		getAgentContext():lotus.domino.AgentContext;
		getServerName():string;
		getURL():string;
		getNotesURL():string;
		getHttpURL():string;
		isConvertMime():boolean;
		isConvertMIME():boolean;
		setConvertMime(arg0:boolean):void;
		setConvertMIME(arg0:boolean):void;
		getSessionToken():string;
		getSessionToken(arg0:string):string;
		getCredentials():any;
		isValid():boolean;
		sendConsoleCommand(arg0:string,arg1:string):string;
		getUserPolicySettings(arg0:string,arg1:string,arg2:number):lotus.domino.Document;
		getUserPolicySettings(arg0:string,arg1:string,arg2:number,arg3:string):lotus.domino.Document;
		hashPassword(arg0:string):string;
		verifyPassword(arg0:string,arg1:string):boolean;
		resetUserPassword(arg0:string,arg1:string,arg2:string):boolean;
		resetUserPassword(arg0:string,arg1:string,arg2:string,arg3:number):boolean;
		isTrackMillisecInJavaDates():boolean;
		setTrackMillisecInJavaDates(arg0:boolean):void;
		setAllowLoopBack(arg0:boolean):void;
		getCalendar(arg0:lotus.domino.Database):lotus.domino.NotesCalendar;
		freeResourceSearch(arg0:lotus.domino.DateTime,arg1:lotus.domino.DateTime,arg2:string,arg3:number,arg4:number):java.util.Vector;
		freeResourceSearch(arg0:lotus.domino.DateTime,arg1:lotus.domino.DateTime,arg2:string,arg3:number,arg4:number,arg5:string,arg6:number,arg7:string,arg8:string,arg9:number):java.util.Vector;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
		createSession():lotus.domino.Session;
		createSession(arg0:number):lotus.domino.Session;
		createSession(arg0:string,arg1:string):lotus.domino.Session;
		createSession(arg0:string):lotus.domino.Session;
		createSessionWithTokenEx(arg0:string):lotus.domino.Session;
		createSessionWithTokenOrName(arg0:string,arg1:string,arg2:string):lotus.domino.Session;
		createSessionWithFullAccess(arg0:string):lotus.domino.Session;
		createTrustedSession():lotus.domino.Session;
		registerJavaThread():void;
	}
	export class Stream{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		close():void;
		getContents(arg0:any):void;
		getContents(arg0:any):void;
		open(arg0:string):boolean;
		open(arg0:string,arg1:string):boolean;
		read():any;
		read(arg0:number):any;
		readText():string;
		readText(arg0:number):string;
		readText(arg0:number,arg1:number):string;
		setContents(arg0:any):void;
		setContents(arg0:any):void;
		truncate():void;
		write(arg0:any):number;
		writeText(arg0:string):number;
		writeText(arg0:string,arg1:number):number;
		getBytes():number;
		getCharset():string;
		getPosition():number;
		isEOS():boolean;
		isReadOnly():boolean;
		setPosition(arg0:number):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class View{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		clear():void;
		FTSearch(arg0:string,arg1:number):number;
		FTSearch(arg0:string):number;
		FTSearchSorted(arg0:string):number;
		FTSearchSorted(arg0:string,arg1:number):number;
		FTSearchSorted(arg0:string,arg1:number,arg2:string):number;
		FTSearchSorted(arg0:string,arg1:number,arg2:string,arg3:boolean,arg4:boolean,arg5:boolean,arg6:boolean):number;
		FTSearchSorted(arg0:string,arg1:number,arg2:number):number;
		FTSearchSorted(arg0:string,arg1:number,arg2:number,arg3:boolean,arg4:boolean,arg5:boolean,arg6:boolean):number;
		FTSearchSorted(arg0:java.util.Vector):number;
		FTSearchSorted(arg0:java.util.Vector,arg1:number):number;
		FTSearchSorted(arg0:java.util.Vector,arg1:number,arg2:string):number;
		FTSearchSorted(arg0:java.util.Vector,arg1:number,arg2:string,arg3:boolean,arg4:boolean,arg5:boolean,arg6:boolean):number;
		FTSearchSorted(arg0:java.util.Vector,arg1:number,arg2:number):number;
		FTSearchSorted(arg0:java.util.Vector,arg1:number,arg2:number,arg3:boolean,arg4:boolean,arg5:boolean,arg6:boolean):number;
		getChild(arg0:lotus.domino.Document):lotus.domino.Document;
		getDocumentByKey(arg0:java.util.Vector):lotus.domino.Document;
		getDocumentByKey(arg0:java.util.Vector,arg1:boolean):lotus.domino.Document;
		getDocumentByKey(arg0:any):lotus.domino.Document;
		getDocumentByKey(arg0:any,arg1:boolean):lotus.domino.Document;
		getAllDocumentsByKey(arg0:java.util.Vector):lotus.domino.DocumentCollection;
		getAllDocumentsByKey(arg0:java.util.Vector,arg1:boolean):lotus.domino.DocumentCollection;
		getAllDocumentsByKey(arg0:any):lotus.domino.DocumentCollection;
		getAllDocumentsByKey(arg0:any,arg1:boolean):lotus.domino.DocumentCollection;
		getEntryByKey(arg0:java.util.Vector):lotus.domino.ViewEntry;
		getEntryByKey(arg0:java.util.Vector,arg1:boolean):lotus.domino.ViewEntry;
		getEntryByKey(arg0:any):lotus.domino.ViewEntry;
		getEntryByKey(arg0:any,arg1:boolean):lotus.domino.ViewEntry;
		getAllEntriesByKey(arg0:java.util.Vector):lotus.domino.ViewEntryCollection;
		getAllEntriesByKey(arg0:java.util.Vector,arg1:boolean):lotus.domino.ViewEntryCollection;
		getAllEntriesByKey(arg0:any):lotus.domino.ViewEntryCollection;
		getAllEntriesByKey(arg0:any,arg1:boolean):lotus.domino.ViewEntryCollection;
		getAllEntries():lotus.domino.ViewEntryCollection;
		getFirstDocument():lotus.domino.Document;
		getLastDocument():lotus.domino.Document;
		getNextDocument(arg0:lotus.domino.Document):lotus.domino.Document;
		getNextSibling(arg0:lotus.domino.Document):lotus.domino.Document;
		getNthDocument(arg0:number):lotus.domino.Document;
		getParentDocument(arg0:lotus.domino.Document):lotus.domino.Document;
		getPrevDocument(arg0:lotus.domino.Document):lotus.domino.Document;
		getPrevSibling(arg0:lotus.domino.Document):lotus.domino.Document;
		refresh():void;
		remove():void;
		getCreated():lotus.domino.DateTime;
		getLastModified():lotus.domino.DateTime;
		getName():string;
		getUniversalID():string;
		getParent():lotus.domino.Database;
		isDefaultView():boolean;
		isFolder():boolean;
		getColumns():java.util.Vector;
		getReaders():java.util.Vector;
		setReaders(arg0:java.util.Vector):void;
		isAutoUpdate():boolean;
		isQueryView():boolean;
		isEnableNoteIDsForCategories():boolean;
		setEnableNoteIDsForCategories(arg0:boolean):void;
		setAutoUpdate(arg0:boolean):void;
		getAliases():java.util.Vector;
		isCalendar():boolean;
		isProtectReaders():boolean;
		setProtectReaders(arg0:boolean):void;
		isModified():boolean;
		isCategorized():boolean;
		isPrivate():boolean;
		isConflict():boolean;
		isHierarchical():boolean;
		getColumnCount():number;
		getBackgroundColor():number;
		getRowLines():number;
		getHeaderLines():number;
		getSpacing():number;
		getTopLevelEntryCount():number;
		getColumn(arg0:number):lotus.domino.ViewColumn;
		getColumnNames():java.util.Vector;
		createViewNav():lotus.domino.ViewNavigator;
		createViewNav(arg0:number):lotus.domino.ViewNavigator;
		createViewNavMaxLevel(arg0:number):lotus.domino.ViewNavigator;
		createViewNavMaxLevel(arg0:number,arg1:number):lotus.domino.ViewNavigator;
		createViewNavFrom(arg0:any):lotus.domino.ViewNavigator;
		createViewNavFrom(arg0:any,arg1:number):lotus.domino.ViewNavigator;
		createViewNavFromChildren(arg0:any):lotus.domino.ViewNavigator;
		createViewNavFromChildren(arg0:any,arg1:number):lotus.domino.ViewNavigator;
		createViewNavFromDescendants(arg0:any):lotus.domino.ViewNavigator;
		createViewNavFromDescendants(arg0:any,arg1:number):lotus.domino.ViewNavigator;
		createViewNavFromCategory(arg0:string):lotus.domino.ViewNavigator;
		createViewNavFromCategory(arg0:string,arg1:number):lotus.domino.ViewNavigator;
		getURL():string;
		getNotesURL():string;
		getHttpURL():string;
		createColumn():lotus.domino.ViewColumn;
		createColumn(arg0:number):lotus.domino.ViewColumn;
		createColumn(arg0:number,arg1:string):lotus.domino.ViewColumn;
		createColumn(arg0:number,arg1:string,arg2:string):lotus.domino.ViewColumn;
		copyColumn(arg0:number):lotus.domino.ViewColumn;
		copyColumn(arg0:string):lotus.domino.ViewColumn;
		copyColumn(arg0:lotus.domino.ViewColumn):lotus.domino.ViewColumn;
		copyColumn(arg0:number,arg1:number):lotus.domino.ViewColumn;
		copyColumn(arg0:string,arg1:number):lotus.domino.ViewColumn;
		copyColumn(arg0:lotus.domino.ViewColumn,arg1:number):lotus.domino.ViewColumn;
		removeColumn():void;
		removeColumn(arg0:number):void;
		removeColumn(arg0:string):void;
		setAliases(arg0:java.util.Vector):void;
		setAliases(arg0:string):void;
		isProhibitDesignRefresh():boolean;
		setProhibitDesignRefresh(arg0:boolean):void;
		setDefaultView(arg0:boolean):void;
		setBackgroundColor(arg0:number):void;
		setSpacing(arg0:number):void;
		setName(arg0:string):void;
		setSelectionFormula(arg0:string):void;
		getSelectionFormula():string;
		getEntryCount():number;
		getViewInheritedName():string;
		getLockHolders():java.util.Vector;
		lock():boolean;
		lock(arg0:boolean):boolean;
		lock(arg0:string):boolean;
		lock(arg0:string,arg1:boolean):boolean;
		lock(arg0:java.util.Vector):boolean;
		lock(arg0:java.util.Vector,arg1:boolean):boolean;
		lockProvisional():boolean;
		lockProvisional(arg0:string):boolean;
		lockProvisional(arg0:java.util.Vector):boolean;
		unlock():void;
		markAllRead(arg0:string):void;
		markAllUnread(arg0:string):void;
		createViewNavFromAllUnread(arg0:string):lotus.domino.ViewNavigator;
		markAllRead():void;
		markAllUnread():void;
		createViewNavFromAllUnread():lotus.domino.ViewNavigator;
		createViewEntryCollection():lotus.domino.ViewEntryCollection;
		setSelectionQuery(arg0:string):void;
		getSelectionQuery():string;
		getColumnValues(arg0:number):java.util.Vector;
		resortView(arg0:string,arg1:boolean):void;
		resortView(arg0:string):void;
		resortView():void;
		getAllUnreadEntries():lotus.domino.ViewEntryCollection;
		getAllUnreadEntries(arg0:string):lotus.domino.ViewEntryCollection;
		getAllReadEntries():lotus.domino.ViewEntryCollection;
		getAllReadEntries(arg0:string):lotus.domino.ViewEntryCollection;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class ViewColumn{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getTitle():string;
		getItemName():string;
		getPosition():number;
		getFormula():string;
		isSorted():boolean;
		isCategory():boolean;
		isHidden():boolean;
		isResponse():boolean;
		getWidth():number;
		isField():boolean;
		isFormula():boolean;
		isSortDescending():boolean;
		isHideDetail():boolean;
		isIcon():boolean;
		isResize():boolean;
		isResortAscending():boolean;
		isResortDescending():boolean;
		isShowTwistie():boolean;
		isResortToView():boolean;
		isSecondaryResort():boolean;
		isSecondaryResortDescending():boolean;
		isCaseSensitiveSort():boolean;
		isAccentSensitiveSort():boolean;
		getFontFace():string;
		getListSep():number;
		getAlignment():number;
		getHeaderAlignment():number;
		getFontStyle():number;
		getFontColor():number;
		getFontPointSize():number;
		getNumberDigits():number;
		getNumberFormat():number;
		getNumberAttrib():number;
		getDateFmt():number;
		getTimeFmt():number;
		getTimeZoneFmt():number;
		getTimeDateFmt():number;
		getParent():lotus.domino.View;
		getHeaderFontColor():number;
		getHeaderFontFace():string;
		getHeaderFontPointSize():number;
		getHeaderFontStyle():number;
		getSecondaryResortColumnIndex():number;
		isFontBold():boolean;
		isFontItalic():boolean;
		isFontUnderline():boolean;
		isFontStrikethrough():boolean;
		isHeaderFontBold():boolean;
		isHeaderFontItalic():boolean;
		isHeaderFontUnderline():boolean;
		isHeaderFontStrikethrough():boolean;
		isNumberAttribParens():boolean;
		isNumberAttribPunctuated():boolean;
		isNumberAttribPercent():boolean;
		getResortToViewName():string;
		setAlignment(arg0:number):void;
		setDateFmt(arg0:number):void;
		setFontColor(arg0:number):void;
		setFontFace(arg0:string):void;
		setFontPointSize(arg0:number):void;
		setFontStyle(arg0:number):void;
		setFormula(arg0:string):void;
		setHeaderAlignment(arg0:number):void;
		setAccentSensitiveSort(arg0:boolean):void;
		setCaseSensitiveSort(arg0:boolean):void;
		setHidden(arg0:boolean):void;
		setHideDetail(arg0:boolean):void;
		setResize(arg0:boolean):void;
		setResortAscending(arg0:boolean):void;
		setResortDescending(arg0:boolean):void;
		setResortToView(arg0:boolean):void;
		setSecondaryResort(arg0:boolean):void;
		setSecondaryResortDescending(arg0:boolean):void;
		setShowTwistie(arg0:boolean):void;
		setSortDescending(arg0:boolean):void;
		setSorted(arg0:boolean):void;
		setListSep(arg0:number):void;
		setNumberAttrib(arg0:number):void;
		setNumberDigits(arg0:number):void;
		setNumberFormat(arg0:number):void;
		setPosition(arg0:number):void;
		setTimeDateFmt(arg0:number):void;
		setTimeFmt(arg0:number):void;
		setTimeZoneFmt(arg0:number):void;
		setTitle(arg0:string):void;
		setWidth(arg0:number):void;
		setHeaderFontColor(arg0:number):void;
		setHeaderFontFace(arg0:string):void;
		setHeaderFontPointSize(arg0:number):void;
		setHeaderFontStyle(arg0:number):void;
		setSecondaryResortColumnIndex(arg0:number):void;
		setFontBold(arg0:boolean):void;
		setFontItalic(arg0:boolean):void;
		setFontUnderline(arg0:boolean):void;
		setFontStrikethrough(arg0:boolean):void;
		setHeaderFontBold(arg0:boolean):void;
		setHeaderFontItalic(arg0:boolean):void;
		setHeaderFontUnderline(arg0:boolean):void;
		setHeaderFontStrikethrough(arg0:boolean):void;
		setNumberAttribParens(arg0:boolean):void;
		setNumberAttribPunctuated(arg0:boolean):void;
		setNumberAttribPercent(arg0:boolean):void;
		setResortToViewName(arg0:string):void;
		isHideFormula():boolean;
		setHideFormula(arg0:boolean):void;
		isConstant():boolean;
		getColumnValuesIndex():number;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class ViewEntry{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getNoteID():string;
		getNoteIDAsInt():number;
		getUniversalID():string;
		getPosition(arg0:string):string;
		isDocument():boolean;
		isCategory():boolean;
		isTotal():boolean;
		isConflict():boolean;
		getSiblingCount():number;
		getChildCount():number;
		getDescendantCount():number;
		getIndentLevel():number;
		getColumnIndentLevel():number;
		getFTSearchScore():number;
		getParent():any;
		getDocument():lotus.domino.Document;
		getColumnValues():java.util.Vector;
		isValid():boolean;
		getRead():boolean;
		getRead(arg0:string):boolean;
		isPreferJavaDates():boolean;
		setPreferJavaDates(arg0:boolean):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class ViewEntryCollection{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		getFirstEntry():lotus.domino.ViewEntry;
		getLastEntry():lotus.domino.ViewEntry;
		getNextEntry(arg0:lotus.domino.ViewEntry):lotus.domino.ViewEntry;
		getPrevEntry(arg0:lotus.domino.ViewEntry):lotus.domino.ViewEntry;
		getNthEntry(arg0:number):lotus.domino.ViewEntry;
		getNextEntry():lotus.domino.ViewEntry;
		getPrevEntry():lotus.domino.ViewEntry;
		getEntry(arg0:any):lotus.domino.ViewEntry;
		addEntry(arg0:any):void;
		addEntry(arg0:any,arg1:boolean):void;
		deleteEntry(arg0:lotus.domino.ViewEntry):void;
		FTSearch(arg0:string):void;
		FTSearch(arg0:string,arg1:number):void;
		removeAll(arg0:boolean):void;
		updateAll():void;
		stampAll(arg0:string,arg1:any):void;
		putAllInFolder(arg0:string):void;
		putAllInFolder(arg0:string,arg1:boolean):void;
		removeAllFromFolder(arg0:string):void;
		intersect(arg0:number):void;
		intersect(arg0:string):void;
		intersect(arg0:lotus.domino.Base):void;
		merge(arg0:number):void;
		merge(arg0:string):void;
		merge(arg0:lotus.domino.Base):void;
		subtract(arg0:number):void;
		subtract(arg0:string):void;
		subtract(arg0:lotus.domino.Base):void;
		contains(arg0:number):boolean;
		contains(arg0:string):boolean;
		contains(arg0:lotus.domino.Base):boolean;
		cloneCollection():lotus.domino.ViewEntryCollection;
		getCount():number;
		getQuery():string;
		getParent():lotus.domino.View;
		markAllRead(arg0:string):void;
		markAllUnread(arg0:string):void;
		markAllRead():void;
		markAllUnread():void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class ViewNavigator{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		needsGui():boolean;
		dontUseGui():void;
		okToUseGui():void;
		avoidingGui():boolean;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
		gotoFirst():boolean;
		getFirst():lotus.domino.ViewEntry;
		gotoFirstDocument():boolean;
		getFirstDocument():lotus.domino.ViewEntry;
		gotoNext():boolean;
		getNext():lotus.domino.ViewEntry;
		gotoNextCategory():boolean;
		gotoNextDocument():boolean;
		getNextCategory():lotus.domino.ViewEntry;
		getNextDocument():lotus.domino.ViewEntry;
		gotoPrev():boolean;
		getPrev():lotus.domino.ViewEntry;
		gotoPrevCategory():boolean;
		gotoPrevDocument():boolean;
		getPrevCategory():lotus.domino.ViewEntry;
		getPrevDocument():lotus.domino.ViewEntry;
		getCurrent():lotus.domino.ViewEntry;
		gotoLast():boolean;
		getLast():lotus.domino.ViewEntry;
		gotoLastDocument():boolean;
		getLastDocument():lotus.domino.ViewEntry;
		gotoChild():boolean;
		getChild():lotus.domino.ViewEntry;
		gotoNextSibling():boolean;
		getNextSibling():lotus.domino.ViewEntry;
		gotoPrevSibling():boolean;
		getPrevSibling():lotus.domino.ViewEntry;
		gotoParent():boolean;
		getParent():lotus.domino.ViewEntry;
		gotoNext(arg0:lotus.domino.ViewEntry):boolean;
		getNext(arg0:lotus.domino.ViewEntry):lotus.domino.ViewEntry;
		gotoPrev(arg0:lotus.domino.ViewEntry):boolean;
		getPrev(arg0:lotus.domino.ViewEntry):lotus.domino.ViewEntry;
		gotoChild(arg0:lotus.domino.ViewEntry):boolean;
		getChild(arg0:lotus.domino.ViewEntry):lotus.domino.ViewEntry;
		gotoNextSibling(arg0:lotus.domino.ViewEntry):boolean;
		getNextSibling(arg0:lotus.domino.ViewEntry):lotus.domino.ViewEntry;
		gotoPrevSibling(arg0:lotus.domino.ViewEntry):boolean;
		getPrevSibling(arg0:lotus.domino.ViewEntry):lotus.domino.ViewEntry;
		gotoParent(arg0:lotus.domino.ViewEntry):boolean;
		getParent(arg0:lotus.domino.ViewEntry):lotus.domino.ViewEntry;
		getNth(arg0:number):lotus.domino.ViewEntry;
		gotoPos(arg0:string,arg1:string):boolean;
		getPos(arg0:string,arg1:string):lotus.domino.ViewEntry;
		gotoEntry(arg0:any):boolean;
		getCacheSize():number;
		setCacheSize(arg0:number):void;
		getMaxLevel():number;
		getCount():number;
		setMaxLevel(arg0:number):void;
		getParentView():lotus.domino.View;
		markAllRead(arg0:string):void;
		markAllUnread(arg0:string):void;
		markAllRead():void;
		markAllUnread():void;
		getEntryOptions():number;
		setEntryOptions(arg0:number):void;
		getBufferMaxEntries():number;
		setBufferMaxEntries(arg0:number):void;
		setCacheGuidance(arg0:number):void;
		setCacheGuidance(arg0:number,arg1:number):void;
		skip(arg0:number):number;
		setAutoExpandGuidance(arg0:number,arg1:lotus.domino.NoteCollection,arg2:lotus.domino.NoteCollection):void;
		setAutoExpandGuidance(arg0:number,arg1:number[],arg2:number[]):void;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
	export class XSLTResultTarget{
		equals(arg0:any):boolean;
		hashCode():number;
		toString():string;
		setFileName(arg0:string):void;
		getFileName():string;
		setByteStream(arg0:any):void;
		getByteStream():any;
		getEncoding():string;
		setCharacterStream(arg0:any):void;
		getCharacterStream():any;
		setNode(arg0:any):void;
		getNode():any;
		getClass():any;
		notify():void;
		notifyAll():void;
		wait():void;
		wait(arg0:number):void;
		wait(arg0:number,arg1:number):void;
	}
  export class NotesCalendar{
		getEntry(arg0:string):lotus.domino.NotesCalendarEntry;
		getNoticeByUNID(arg0:string):lotus.domino.NotesCalendarNotice;
		getEntryByUNID(arg0:string):lotus.domino.NotesCalendarEntry;
		getEntryByNoteID(arg0:string):lotus.domino.NotesCalendarEntry;
		readRange(arg0:lotus.domino.DateTime,arg1:lotus.domino.DateTime):string;
		readRange(arg0:lotus.domino.DateTime,arg1:lotus.domino.DateTime,arg2:number,arg3:number):string;
		getEntries(arg0:lotus.domino.DateTime,arg1:lotus.domino.DateTime):java.util.Vector;
		getEntries(arg0:lotus.domino.DateTime,arg1:lotus.domino.DateTime,arg2:number,arg3:number):java.util.Vector;
		createEntry(arg0:string):lotus.domino.NotesCalendarEntry;
		createEntry(arg0:string,arg1:number):lotus.domino.NotesCalendarEntry;
		getNewInvitations():java.util.Vector;
		getNewInvitations(arg0:lotus.domino.DateTime,arg1:lotus.domino.DateTime):java.util.Vector;
		getApptunidFromUID(arg0:string):string;
		getAutoSendNotices():boolean;
		getUntilTime():lotus.domino.DateTime;
		getReadRangeMask1():number;
		getReadRangeMask2():number;
		getEntriesProcessed():number;
		getReadXLotusPropsOutputLevel():number;
		setAutoSendNotices(arg0:boolean):void;
		setReadRangeMask1(arg0:number):void;
		setReadRangeMask2(arg0:number):void;
		setReadXLotusPropsOutputLevel(arg0:number):void;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
	}
  export class NotesCalendarEntry{
		read():string;
		read(arg0:string):string;
		update(arg0:string):void;
		update(arg0:string,arg1:string):void;
		update(arg0:string,arg1:string,arg2:number):void;
		update(arg0:string,arg1:string,arg2:number,arg3:string):void;
		remove():void;
		remove(arg0:number,arg1:string):void;
		getNotices():java.util.Vector;
		getAsDocument():lotus.domino.Document;
		getAsDocument(arg0:number):lotus.domino.Document;
		getAsDocument(arg0:number,arg1:string):lotus.domino.Document;
		decline(arg0:string):void;
		decline(arg0:string,arg1:boolean):void;
		decline(arg0:string,arg1:boolean,arg2:number,arg3:string):void;
		counter(arg0:string,arg1:lotus.domino.DateTime,arg2:lotus.domino.DateTime):void;
		counter(arg0:string,arg1:lotus.domino.DateTime,arg2:lotus.domino.DateTime,arg3:number,arg4:string):void;
		counter(arg0:string,arg1:lotus.domino.DateTime,arg2:lotus.domino.DateTime,arg3:boolean):void;
		counter(arg0:string,arg1:lotus.domino.DateTime,arg2:lotus.domino.DateTime,arg3:boolean,arg4:number,arg5:string):void;
		delegate(arg0:string,arg1:string):void;
		delegate(arg0:string,arg1:string,arg2:number,arg3:string):void;
		delegate(arg0:string,arg1:string,arg2:boolean):void;
		delegate(arg0:string,arg1:string,arg2:boolean,arg3:number,arg4:string):void;
		requestInfo(arg0:string):void;
		requestInfo(arg0:string,arg1:string):void;
		cancel(arg0:string):void;
		cancel(arg0:string,arg1:number,arg2:string):void;
		accept(arg0:string):void;
		accept(arg0:string,arg1:number,arg2:string):void;
		tentativelyAccept(arg0:string):void;
		tentativelyAccept(arg0:string,arg1:number,arg2:string):void;
		getUID():string;
		addInvitees(arg0:java.util.Vector,arg1:java.util.Vector,arg2:java.util.Vector):void;
		addInvitees(arg0:java.util.Vector,arg1:java.util.Vector,arg2:java.util.Vector,arg3:string):void;
		addInvitees(arg0:java.util.Vector,arg1:java.util.Vector,arg2:java.util.Vector,arg3:string,arg4:number):void;
		addInvitees(arg0:java.util.Vector,arg1:java.util.Vector,arg2:java.util.Vector,arg3:string,arg4:number,arg5:number,arg6:string):void;
		removeInvitees(arg0:java.util.Vector):void;
		removeInvitees(arg0:java.util.Vector,arg1:string):void;
		removeInvitees(arg0:java.util.Vector,arg1:string,arg2:number):void;
		removeInvitees(arg0:java.util.Vector,arg1:string,arg2:number,arg3:number,arg4:string):void;
		modifyInvitees(arg0:java.util.Vector,arg1:java.util.Vector,arg2:java.util.Vector,arg3:java.util.Vector):void;
		modifyInvitees(arg0:java.util.Vector,arg1:java.util.Vector,arg2:java.util.Vector,arg3:java.util.Vector,arg4:string):void;
		modifyInvitees(arg0:java.util.Vector,arg1:java.util.Vector,arg2:java.util.Vector,arg3:java.util.Vector,arg4:string,arg5:number):void;
		modifyInvitees(arg0:java.util.Vector,arg1:java.util.Vector,arg2:java.util.Vector,arg3:java.util.Vector,arg4:string,arg5:number,arg6:number,arg7:string):void;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
	}
  export class NotesCalendarNotice{
		read():string;
		accept(arg0:string):void;
		tentativelyAccept(arg0:string):void;
		decline(arg0:string):void;
		decline(arg0:string,arg1:boolean):void;
		counter(arg0:string,arg1:lotus.domino.DateTime,arg2:lotus.domino.DateTime):void;
		counter(arg0:string,arg1:lotus.domino.DateTime,arg2:lotus.domino.DateTime,arg3:boolean):void;
		delegate(arg0:string,arg1:string):void;
		delegate(arg0:string,arg1:string,arg2:boolean):void;
		getNoteID():string;
		getUNID():string;
		isOverwriteCheckEnabled():boolean;
		setOverwriteCheckEnabled(arg0:boolean):void;
		getAsDocument():lotus.domino.Document;
		removeCancelled():void;
		requestInfo(arg0:string):void;
		sendUpdatedInfo(arg0:string):void;
		acceptCounter(arg0:string):void;
		declineCounter(arg0:string):void;
		getOutstandingInvitations():java.util.Vector;
		recycle():void;
		recycle(arg0:java.util.Vector):void;
	}
}
